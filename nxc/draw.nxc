#ifndef DRAW_NXC
#define DRAW_NXC

#include "kinematics.nxc"
#include "pen.nxc"

#define QUADRATIC 2
#define CUBIC 3

//store the coordinates of last control point
//to be able to handle the "smooth curveto" instructions
float LAST_CONTROL_POINT_X = -1000;
float LAST_CONTROL_POINT_Y = -1000;


//store the coordinates of path start
//to be able to handle the closepath instruction
float PATH_START_X = UNSET;
float PATH_START_Y = UNSET;

sub print_point(short x, short y) {
  goto_position(x, y);
  pen_down();
  pen_up();
}

sub print_line(float target_x, float target_y) {
  pen_down();

  Point current_p;
  current_p.x = X;
  current_p.y = Y;

  Point target_p;
  target_p.x = target_x;
  target_p.y = target_y;
  float distance = compute_distance(current_p, target_p);

  PrintSettings print_settings = get_print_settings();
  float f_nb_steps = distance/print_settings.points_per_lego_unit * print_settings.line_resolution;

  float current_x = current_p.x;
  float current_y = current_p.y;
  float distance_x = target_x - current_p.x;
  float distance_y = target_y - current_p.y;

  float step_x = distance_x/f_nb_steps;
  float step_y = distance_y/f_nb_steps;

  int n = 0;
  int nb_steps = round(f_nb_steps);
  while(n < nb_steps) {
    current_x = current_x + step_x;
    current_y = current_y + step_y;

    goto_position(current_x, current_y);
    n = n + 1;
  }

  goto_position(target_x, target_y);
  LAST_CONTROL_POINT_X = UNSET;
  LAST_CONTROL_POINT_Y = UNSET;
}

void print_line_relative(float x, float y) {
  print_line(x + X, y + Y);
}

void goto_point(float x, float y) {
  goto_position(x, y);
  PATH_START_X = x;
  PATH_START_Y = y;
}

void goto_point_relative(float x, float y) {
  goto_position(x + X, y + Y);
  PATH_START_X = x + X;
  PATH_START_Y = y + Y;
}

void plot_points(int xs[], int ys[]) {
  pen_up();
  int i=0;
  repeat(ArrayLen(xs)) {
    print_point(xs[i], ys[i]);
    i += 1;
  }
  pen_up();
}

Point get_last_control_point_reflection() {
 float x0 = X;
 float y0 = Y;

 float x1 = x0;
 if (LAST_CONTROL_POINT_X != UNSET) {
   x1 = x0 + x0 - LAST_CONTROL_POINT_X;
 }

 float y1 = y0;
 if (LAST_CONTROL_POINT_Y != UNSET) {
   y1 = y0 + y0 - LAST_CONTROL_POINT_Y;
 }
 Point p;
 p.x = x1;
 p.y = y1;
 return p;
}

float get_curve_to_position(float t, float x0, float x1, float x2, float x) {
  return (1-t)*(1-t)*(1-t) * x0 + 3*(1-t)*(1-t)* t * x1 + 3*(1-t)* t * t * x2 + t*t*t*x;
}

float get_quadratic_curve_to_position(float t, float x0, float x1, float x) {
  return (1-t)*(1-t)*x0 + 2*(1-t)*t*x1 + t*t*x;
}

void bezier_curve_to(int method, float x1, float y1, float x2, float y2, float x, float y) {
  pen_down();

  float t_step = 0.01;
  if (SIMULATION) {
    t_step = 0.1;
  }

  float x0 = X;
  float y0 = Y;

  PrintSettings print_settings = get_print_settings();
  float distance_threshold = 0.9 * print_settings.points_per_lego_unit / print_settings.line_resolution;


  float t = 0;
  while(t < 1.0) {
    float target_x;
    float target_y;
    if (method == QUADRATIC) {
      target_x = get_quadratic_curve_to_position(t, x0, x1, x);
      target_y = get_quadratic_curve_to_position(t, y0, y1, y);
    }
    if (method == CUBIC) {
      target_x = get_curve_to_position(t, x0, x1, x2, x);
      target_y = get_curve_to_position(t, y0, y1, y2, y);
    }

    Point current_p;
    current_p.x = X;
    current_p.y = Y;

    Point target_p;
    target_p.x = target_x;
    target_p.y = target_y;
    float distance = compute_distance(current_p, target_p);
    if (distance > distance_threshold) {
      goto_position(target_x, target_y);
    }
    t += t_step;
  }
  goto_position(x, y);
  if (method == QUADRATIC) {
    LAST_CONTROL_POINT_X = x1;
    LAST_CONTROL_POINT_Y = y1;
  }
  if (method == CUBIC) {
    LAST_CONTROL_POINT_X = x2;
    LAST_CONTROL_POINT_Y = y2;
  }
}

void curve_to(float x1, float y1, float x2, float y2, float x, float y) {
  bezier_curve_to(CUBIC, x1, y1, x2, y2, x, y);
}

void curve_to_relative(float x1, float y1, float x2, float y2, float x, float y) {
 float x0 = X;
 float y0 = Y;
 curve_to(x1 + x0, y1 + y0, x2 + x0, y2 + y0, x + x0, y + y0);
}

void smooth_curve_to(float x2, float y2, float x, float y) {
 Point p1 = get_last_control_point_reflection();
 curve_to(p1.x, p1.y, x2, y2, x, y);
}

void smooth_curve_to_relative(float x2, float y2, float x, float y) {
 float x0 = X;
 float y0 = Y;

 smooth_curve_to(x2 + x0, y2 + y0, x + x0, y + y0);
}

void quadratic_curve_to(float x1, float y1, float x, float y) {
  bezier_curve_to(QUADRATIC, x1, y1, 0, 0, x, y);
}

void quadratic_curve_to_relative(float x1, float y1, float x, float y) {
 float x0 = X;
 float y0 = Y;
 quadratic_curve_to(x1 + x0, y1 + y0, x + x0, y + y0);
}

void smooth_quadratic_curve_to(float x, float y) {
 Point p1 = get_last_control_point_reflection();
 quadratic_curve_to(p1.x, p1.y, x, y);
}

void smooth_quadratic_curve_to_relative(float x, float y) {
 float x0 = X;
 float y0 = Y;

 smooth_quadratic_curve_to(x + x0, y + y0);
}

void horizontal_line_to(float x) {
  print_line(x, Y);
}

void horizontal_line_to_relative(float x) {
  print_line(x + X, Y);
}

void vertical_line_to(float y) {
  print_line(X, y);
}

void vertical_line_to_relative(float y) {
  print_line(X, y + Y);
}

void close_path() {
  print_line(PATH_START_X, PATH_START_Y);
  PATH_START_X = UNSET;
  PATH_START_Y = UNSET;
  LAST_CONTROL_POINT_X = -1000;
  LAST_CONTROL_POINT_Y = -1000;

  pen_up();
}


void ellipse(float cx, float cy, float rx, float ry) {

  float angle = -PI;
  PrintSettings print_settings = get_print_settings();
  float distance_threshold = 0.9 * print_settings.points_per_lego_unit / print_settings.line_resolution;

  goto_point(cx - rx, cy);
  pen_down();
  while(angle < PI) {
    float target_x = cx + rx * cos(angle);
    float target_y = cy  + ry * sin(angle);

    Point current_p;
    current_p.x = X;
    current_p.y = Y;

    Point target_p;
    target_p.x = target_x;
    target_p.y = target_y;
    float distance = compute_distance(current_p, target_p);
    if (distance > distance_threshold) {
      goto_position(target_x, target_y);
    }
    angle += 0.01;
  }
  close_path();
}


void circle(float cx, float cy, float r) {
  ellipse(cx, cy, r, r);
}

#endif
