#ifndef SVG_PARSER_NXC
#define SVG_PARSER_NXC

#define INITIAL_STATE 0
#define D_FOUND 2
#define POINTS_FOUND 3
#define EQUAL_FOUND 4
#define QUOTE_FOUND 6
#define ATTRIBUTE_FOUND 7

#define EOT 3
#define SIMPLE_QUOTE 39
#define DOUBLE_QUOTE 34

#define LOOKING_FOR_NUMBER 0
#define PROCESSING_NUMBER 1

#include "text_utils.nxc"
#include "draw.nxc"

float X_SHIFT = 0;
float Y_SHIFT = 0;

float SCALE_FACTOR = 1;

Point transform_x_y(float x, float y) {
  Point p;
  p.x = SCALE_FACTOR * (x + X_SHIFT);
  p.y = SCALE_FACTOR * (y + Y_SHIFT);
  return p;
}

Point transform_no_shift_x_y(float x, float y) {
  Point p;
  p.x = SCALE_FACTOR * x;
  p.y = SCALE_FACTOR * y;
  return p;
}

int get_params(byte& handle, float& result[], char& last_read_char) {
   int state = LOOKING_FOR_NUMBER;
   int nb_requested_params = ArrayLen(result);
   int i = 0;
   string accumulator = "";
   while(i < nb_requested_params) {
     char s;
     unsigned int return_code;
     if (last_read_char == NULL) {
       unsigned int return_code = Read(handle, s);
     } else {
       s = last_read_char;
       last_read_char = NULL;
       return_code = LDR_SUCCESS;
     }

     switch (return_code)
     {
       case LDR_SUCCESS:
       {
         if (s == ',') {
           float f = StrToNum(accumulator);
           result[i] = f;
           accumulator = "";
           i += 1;
           state=LOOKING_FOR_NUMBER;
         }

         if (s == ' ' && state == PROCESSING_NUMBER) {
           float f = StrToNum(accumulator);
           result[i] = f;
           accumulator = "";
           i += 1;
           state=LOOKING_FOR_NUMBER;
         }

         if (s == '-') {
           if (state == PROCESSING_NUMBER) {
             float f = StrToNum(accumulator);
             result[i] = f;
             accumulator = "";
             i += 1;
           }
           accumulator += char_to_string(s);
           state = PROCESSING_NUMBER;
         }

         if (isdigit(s)) {
           accumulator += char_to_string(s);
           state = PROCESSING_NUMBER;
         }

         if (s == '.' && state == PROCESSING_NUMBER) {
           accumulator += char_to_string(s);
         }

         if (isalpha(s) || s == SIMPLE_QUOTE || s == DOUBLE_QUOTE) {
           if (state == PROCESSING_NUMBER) {
             float f = StrToNum(accumulator);
             result[i] = f;
             i += 1;
           }
           last_read_char = s;
           return i;
         }
         break;
       }
       case LDR_ENDOFFILE: {
         // No more data to read.
         return i;
       }
       default: {
         display_centered_text("Read failed");
         Wait(1000);
         shutdown();
       }
     }
   }

  return i;
}

int get_nb_params_from_command(char command) {
  int result = 0;
  switch(command) {
    case 'M':
    {
      result = 2;
      break;
    }
    case 'm':
    {
      result = 2;
      break;
    }
    case 'L':
    {
      result = 2;
      break;
    }
    case 'l':
    {
      result = 2;
      break;
    }
    case 'H':
    {
      result = 1;
      break;
    }
    case 'h':
    {
      result = 1;
      break;
    }
    case 'V':
    {
      result = 1;
      break;
    }
    case 'v':
    {
      result = 1;
      break;
    }
    case 'z':
    {
      result = 0;
      break;
    }
    case 'C':
    {
      result = 6;
      break;
    }
    case 'c':
    {
      result = 6;
      break;
    }
    case 'S':
    {
      result = 4;
      break;
    }
    case 's':
    {
      result = 4;
      break;
    }
    case 'Q':
    {
      result = 4;
      break;
    }
    case 'q':
    {
      result = 4;
      break;
    }
    case 'T':
    {
      result = 2;
      break;
    }
    case 't':
    {
      result = 2;
      break;
    }
    default:
    {
      display_centered_text("Unknown command.");
      Wait(1000);
    }
  }
  return result;
}

void execute_command(char command, float& params[]) {

  bool debug = true;
  if (debug) {
    string msg = char_to_string(command);
    msg += " ";
    int k = 0;
    while(k < ArrayLen(params)) {
      msg += NumToStr(params[k]);
      msg += " ";
      k += 1;
    }
    display_centered_text(msg);
    Wait(2000);
  }


  switch(command) {
    case 'M':
    {
      Point p = transform_x_y(params[0], params[1]);
      pen_up();
      goto_point(p.x, p.y);
      break;
    }
    case 'm':
    {
      Point p = transform_no_shift_x_y(params[0], params[1]);
      pen_up();
      goto_point_relative(p.x, p.y);
      break;
    }
    case 'L':
    {
      Point p = transform_x_y(params[0], params[1]);
      print_line(p.x, p.y);
      break;
    }
    case 'l':
    {
      Point p = transform_no_shift_x_y(params[0], params[1]);
      print_line_relative(p.x, p.y);
      break;
    }
    case 'H':
    {
      Point p = transform_x_y(params[0], 0);
      horizontal_line_to(p.x);
      break;
    }
    case 'h':
    {
      Point p = transform_no_shift_x_y(params[0], 0);
      horizontal_line_to_relative(p.x);
      break;
    }
    case 'V':
    {
      Point p = transform_x_y(0, params[0]);
      vertical_line_to(p.y);
      break;
    }
    case 'v':
    {
      Point p = transform_no_shift_x_y(0, params[0]);
      vertical_line_to_relative(p.y);
      break;
    }
    case 'z':
    {
      close_path();
      break;
    }
    case 'C':
    {
      Point p1 = transform_x_y(params[0], params[1]);
      Point p2 = transform_x_y(params[2], params[3]);
      Point p3 = transform_x_y(params[4], params[5]);
      curve_to(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
      break;
    }
    case 'c':
    {
      Point p1 = transform_no_shift_x_y(params[0], params[1]);
      Point p2 = transform_no_shift_x_y(params[2], params[3]);
      Point p3 = transform_no_shift_x_y(params[4], params[5]);
      curve_to_relative(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
      break;
    }
    case 'S':
    {
      Point p2 = transform_x_y(params[0], params[1]);
      Point p3 = transform_x_y(params[2], params[3]);
      smooth_curve_to(p2.x, p2.y, p3.x, p3.y);
      break;
    }
    case 's':
    {
      Point p2 = transform_no_shift_x_y(params[0], params[1]);
      Point p3 = transform_no_shift_x_y(params[2], params[3]);
      smooth_curve_to_relative(p2.x, p2.y, p3.x, p3.y);
      break;
    }
    case 'Q':
    {
      Point p1 = transform_x_y(params[0], params[1]);
      Point p2 = transform_x_y(params[2], params[3]);
      quadratic_curve_to(p1.x, p1.y, p2.x, p2.y);
      break;
    }
    case 'q':
    {
      Point p1 = transform_no_shift_x_y(params[0], params[1]);
      Point p2 = transform_no_shift_x_y(params[2], params[3]);
      quadratic_curve_to_relative(p1.x, p1.y, p2.x, p2.y);
      break;
    }
    case 'T':
    {
      Point p2 = transform_x_y(params[0], params[1]);
      smooth_quadratic_curve_to(p2.x, p2.y);
      break;
    }
    case 't':
    {
      Point p2 = transform_no_shift_x_y(params[0], params[1]);
      smooth_quadratic_curve_to_relative(p2.x, p2.y);
      break;
    }
    default:
    {
      display_centered_text("Unknown command.");
      Wait(1000);
    }
  }
}

void parse_path(byte& handle) {
  char command = NULL;
  char last_read_char = NULL;
  while(true) {
    char s;
    unsigned int return_code;
    if (last_read_char == NULL) {
      unsigned int return_code = Read(handle, s);
    } else {
      s = last_read_char;
      last_read_char = NULL;
      return_code = LDR_SUCCESS;
    }

    switch (return_code)
    {
      case LDR_SUCCESS:
      {
        if (s == SIMPLE_QUOTE || s == DOUBLE_QUOTE) {
          return;
        }

        if (isalpha(s)) {
           command = s;
           //get parameters
           int nb_params = get_nb_params_from_command(command);
           float params[];
           ArrayInit(params, 0, nb_params);
           get_params(handle, params, last_read_char);
           execute_command(command, params);
        }
        if (s == '-' || isdigit(s)) {
           int nb_params = get_nb_params_from_command(command);
           float params[];
           ArrayInit(params, 0, nb_params);
           get_params(handle, params, s);
           execute_command(command, params);
        }
        break;
      }
      case LDR_ENDOFFILE:
        // No more data to read.
        return;
      default:
        display_centered_text("Read failed.");
        Wait(1000);
        shutdown();
    }
  }

  pen_up();
}


void parse_polygon_points(byte& handle, bool do_close_path) {
  char command = NULL;
  char last_read_char = NULL;
  bool first_command = true;
  while(true) {
    char s;
    unsigned int return_code;
    if (last_read_char == NULL) {
      unsigned int return_code = Read(handle, s);
    } else {
      s = last_read_char;
      last_read_char = NULL;
      return_code = LDR_SUCCESS;
    }

    switch (return_code)
    {
      case LDR_SUCCESS:
      {
        if (s == SIMPLE_QUOTE || s == DOUBLE_QUOTE) {
          if (do_close_path) {
            close_path();
          }
          pen_up();
          return;
        }

        if (isalpha(s)) {
           display_centered_text("Unexpected char");
           Wait(1000);
        }
        if (s == '-' || isdigit(s)) {
           int nb_params = 2;
           float params[];
           ArrayInit(params, 0, nb_params);
           get_params(handle, params, s);
           if (first_command) {
             execute_command('M', params);
             first_command = false;
           } else {
             execute_command('L', params);
           }
        }
        break;
      }
      case LDR_ENDOFFILE:
        // No more data to read.
        return;
      default:
        display_centered_text("Read failed.");
        Wait(1000);
        shutdown();
    }
  }
  if (do_close_path) {
    close_path();
  }
  pen_up();
}

void reset_scaling_parameters() {
  X_SHIFT = 0;
  Y_SHIFT = 0;
  SCALE_FACTOR = 1;
}

void reset_min_max_x_y() {
  MIN_X = UNSET;
  MAX_X = UNSET;
  MIN_Y = UNSET;
  MAX_Y = UNSET;
}

string get_next_token(byte& handle, char& last_read_char) {
  string result="";

  while(true) {
    unsigned int return_code;
    if (last_read_char == NULL) {
      unsigned int return_code = Read(handle, last_read_char);
    } else {
      return_code = LDR_SUCCESS;
    }

    switch (return_code)
    {
      case LDR_SUCCESS:
      {
        if (iscntrl(last_read_char)) {
          if (last_read_char == NULL) {
            result = char_to_string(EOT);
          } else {
            last_read_char = NULL;
          }
          return result;
        }
        if (isalpha(last_read_char)) {
           result += char_to_string(last_read_char);
        }
        else
        {
          if (isspace(last_read_char) && StrLen(result) == 0) {
            last_read_char = NULL;
            break;
          }

          if (StrLen(result) == 0) {
            result += char_to_string(last_read_char);
            last_read_char = NULL;
          }
          return result;
        }
        break;
      }
      case LDR_ENDOFFILE:
        // No more data to read.
        display_centered_text("End of file reached.");
        Wait(1000);
        last_read_char = EOT;
        return result;
      default:
        display_centered_text("Read failed.");
        Wait(1000);
        shutdown();
    }
    last_read_char = NULL;
  }
}

void parse_path_instruction(byte& handle, char& last_read_char) {
 int state = INITIAL_STATE;
 while(true) {
   string current_path;
   unsigned int return_code;
   if (last_read_char == NULL) {
      return_code = Read(handle, last_read_char);
    } else {
      return_code = LDR_SUCCESS;
    }

   switch (return_code)
   {
     case LDR_SUCCESS:
        switch (state)
        {
          case INITIAL_STATE:
            if (last_read_char == 'd') {
              state = D_FOUND;
            }
            if (last_read_char == '>') {
              return;
            }
            break;
          case D_FOUND:
            if (last_read_char == '=') {
              state = EQUAL_FOUND;
            } else {
                return;
            }
            break;
          case EQUAL_FOUND:
            if (last_read_char == SIMPLE_QUOTE || last_read_char == DOUBLE_QUOTE) {
              parse_path(handle);
              display_centered_text("parsing done");
              Wait(1000);
              return;
            } else {
               return;
            }
            break;
        }
        break;
     case LDR_ENDOFFILE:
        // No more data to read.
        return;
     default:
        // Unanticipated exception.
        display_centered_text("Read failed.");
        Wait(1000);
        shutdown();
   }
   last_read_char = NULL;
 }
}

void parse_polygon_instruction(byte& handle, char& last_read_char, bool do_close_path) {
 int state = INITIAL_STATE;
 bool should_break = false;
 while(true) {
   string current_path;
   unsigned int return_code;
   string token = get_next_token(handle, last_read_char);
   if (last_read_char == EOT) {
     should_break = true;
   }

   switch (state)
   {
     case INITIAL_STATE:
       if (token == "points") {
         state = POINTS_FOUND;
       }
       if (token == ">") {
         return;
       }
       break;
     case POINTS_FOUND:
       if (token == "=") {
         state = EQUAL_FOUND;
       } else {
         return;
       }
       break;
     case EQUAL_FOUND:
       if (token == char_to_string(SIMPLE_QUOTE) || token == char_to_string(DOUBLE_QUOTE)) {
         parse_polygon_points(handle, do_close_path);
         return;
       } else {
          return;
       }
       break;
   }
   if (should_break) {
     display_centered_text("Breaking");
     Wait(1000);
     break;
   }
 }
}

void parse_basic_shape_instruction(byte& handle, char& last_read_char) {
 display_centered_text("circle instructions");
 Wait(1000);

 int state = INITIAL_STATE;
 bool should_break = false;
 string current_attribute;
 bool cx_set = false;
 bool cy_set = false;
 bool r_set = false;
 bool rx_set = false;
 bool ry_set = false;
 bool x_set = false;
 bool y_set = false;
 bool width_set = false;
 bool height_set = false;
 float cx;
 float cy;
 float r;
 float rx;
 float ry;
 float x;
 float y;
 float width;
 float height;
 bool circle_set = false;
 bool ellipse_set = false;
 bool rectangle_set = false;
 while(!circle_set && !ellipse_set && !rectangle_set) {
   string current_path;
   unsigned int return_code;
   string token = get_next_token(handle, last_read_char);
   if (last_read_char == EOT) {
     should_break = true;
   }

   switch (state)
   {
     case INITIAL_STATE:
       if (token == "cx" || token == "cy" || token == "r" || token == "rx" || token == "ry" || token == "x" || token == "y" || token == "width" || token == "height") {
         state = ATTRIBUTE_FOUND;
         current_attribute = token;
       }
       if (token == ">") {
         return;
       }
       break;
     case ATTRIBUTE_FOUND:
       if (token == "=") {
         state = EQUAL_FOUND;
       } else {
         return;
       }
       break;
     case EQUAL_FOUND:
       if (token == char_to_string(SIMPLE_QUOTE) || token == char_to_string(DOUBLE_QUOTE)) {
         float params[];
         ArrayInit(params, 0, 1);
         get_params(handle, params, last_read_char);
         last_read_char = NULL; //should be a quote
         if (current_attribute == "cx") {
           cx = params[0];
           cx_set = true;
         }
         if (current_attribute == "cy") {
           cy = params[0];
           cy_set = true;
         }
         if (current_attribute == "r") {
           r = params[0];
           r_set = true;
         }
         if (current_attribute == "rx") {
           rx = params[0];
           rx_set = true;
         }
         if (current_attribute == "ry") {
           ry = params[0];
           ry_set = true;
         }
         if (current_attribute == "x") {
           x = params[0];
           x_set = true;
         }
         if (current_attribute == "y") {
           y = params[0];
           y_set = true;
         }
         if (current_attribute == "width") {
           width = params[0];
           width_set = true;
         }
         if (current_attribute == "height") {
           height = params[0];
           height_set = true;
         }

         current_attribute = "";
         state = INITIAL_STATE;

       } else {
          display_centered_text("Returning");
          Wait(1000);
          return;
       }
       break;
   }
   if (should_break) {
     return;
   }

   circle_set = cx_set && cy_set && r_set;
   ellipse_set = cx_set && cy_set && rx_set && ry_set;
   rectangle_set = x_set && y_set && width_set && height_set;
   if (rectangle_set) {
     display_centered_text("rectangle_set");
     Wait(1000);
   }
 }
 if (circle_set) {
   Point p = transform_x_y(cx, cy);
   Point p_radius = transform_no_shift_x_y(r, r);
   circle(p.x, p.y, p_radius.x);
 }

 if (ellipse_set) {
   Point p = transform_x_y(cx, cy);
   Point p_radius = transform_no_shift_x_y(rx, ry);
   ellipse(p.x, p.y, p_radius.x, p_radius.y);
 }

 if (rectangle_set) {
   Point p = transform_x_y(x, y);
   Point p_radius = transform_no_shift_x_y(width, height);
   rectangle(p.x, p.y, p_radius.x, p_radius.y);
 }

}

void parse_svg(byte& handle) {
  char last_read_char = NULL;
  while(true) {
    string word = get_next_token(handle, last_read_char);
    if (word == "path") {
      parse_path_instruction(handle, last_read_char);
      while(true) {
        word = get_next_token(handle, last_read_char);
        display_centered_text(word);
        Wait(1000);
        if (word == ">") {
          break;
        }
      }
    }

    if (word == "polygon" || word == "polyline") {
      bool do_close_path = (word == "polygon");
      parse_polygon_instruction(handle, last_read_char, do_close_path);
      while(true) {
        word = get_next_token(handle, last_read_char);
        if (word == ">") {
          break;
        }
      }
    }

    if (word == "circle" || word == "ellipse" || word == "rect") {
      parse_basic_shape_instruction(handle, last_read_char);
      while(true) {
        word = get_next_token(handle, last_read_char);
        if (word == ">") {
          break;
        }
      }
    }

    if (word == char_to_string(EOT)) {
      break;
    }
  }
}

void set_scaling_parameters(byte& handle) {
  reset_min_max_x_y();
  reset_scaling_parameters();
  SIMULATION = true;

  parse_svg(handle);

  X_SHIFT = -MIN_X;
  Y_SHIFT = -MIN_Y;

  PrintSettings print_settings = get_print_settings();

  float scale_x = print_settings.width * print_settings.points_per_lego_unit /(MAX_X - MIN_X);
  float scale_y = print_settings.height * print_settings.points_per_lego_unit /(MAX_Y - MIN_Y);

  SCALE_FACTOR = min(scale_x, scale_y);

  reset_min_max_x_y();
  SIMULATION = false;
}

void draw_svg(string filename) {
  display_centered_text("Analyzing file.");
  int fsize;
  byte handle;
  OpenFileRead(filename, fsize, handle);
  set_scaling_parameters(handle);
  OpenFileRead(filename, fsize, handle);
  display_centered_text("Printing.");
  parse_svg(handle);
  pen_up();
  goto_start_position();
}



#endif
