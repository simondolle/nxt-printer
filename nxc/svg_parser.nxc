#ifndef SVG_PARSER_NXC
#define SVG_PARSER_NXC

#define INITIAL_STATE 0
#define FIRST_SPACE_FOUND 1
#define D_FOUND 2
#define SECOND_SPACE_FOUND 3
#define EQUAL_FOUND 4
#define THIRD_SPACE_FOUND 5
#define QUOTE_FOUND 6

#define SIMPLE_QUOTE 39
#define DOUBLE_QUOTE 34

#define LOOKING_FOR_NUMBER 0
#define PROCESSING_NUMBER 1

#include "text_utils.nxc"
#include "draw.nxc"

float X_SHIFT = 0;
float Y_SHIFT = 0;

float SCALE_FACTOR = 1;

Point transform_x_y(float x, float y) {
  Point p;
  p.x = SCALE_FACTOR * (x + X_SHIFT);
  p.y = SCALE_FACTOR * (y + Y_SHIFT);
  return p;
}

Point transform_no_shift_x_y(float x, float y) {
  Point p;
  p.x = SCALE_FACTOR * x;
  p.y = SCALE_FACTOR * y;
  return p;
}

int get_params(byte& handle, float& result[], char& last_read_char) {
   int state = LOOKING_FOR_NUMBER;
   int nb_requested_params = ArrayLen(result);
   int i = 0;
   string accumulator = "";
   while(i < nb_requested_params) {
     char s;
     unsigned int return_code;
     if (last_read_char == NULL) {
       unsigned int return_code = Read(handle, s);
     } else {
       s = last_read_char;
       last_read_char = NULL;
       return_code = LDR_SUCCESS;
     }

     switch (return_code)
     {
       case LDR_SUCCESS:
       {
         if (s == ',') {
           float f = StrToNum(accumulator);
           result[i] = f;
           accumulator = "";
           i += 1;
           state=LOOKING_FOR_NUMBER;
         }

         if (s == ' ' && state == PROCESSING_NUMBER) {
           float f = StrToNum(accumulator);
           result[i] = f;
           accumulator = "";
           i += 1;
           state=LOOKING_FOR_NUMBER;
         }

         if (s == '-') {
           if (state == PROCESSING_NUMBER) {
             float f = StrToNum(accumulator);
             result[i] = f;
             accumulator = "";
             i += 1;
           }
           accumulator += char_to_string(s);
           state = PROCESSING_NUMBER;
         }

         if (isdigit(s)) {
           accumulator += char_to_string(s);
           state = PROCESSING_NUMBER;
         }

         if (s == '.' && state == PROCESSING_NUMBER) {
           accumulator += char_to_string(s);
         }

         if (isalpha(s) || s == SIMPLE_QUOTE || s == DOUBLE_QUOTE) {
           if (state == PROCESSING_NUMBER) {
             float f = StrToNum(accumulator);
             result[i] = f;
             i += 1;
           }
           last_read_char = s;
           return i;
         }
         break;
       }
       case LDR_ENDOFFILE: {
         // No more data to read.
         return i;
       }
       default: {
         display_centered_text("Read failed");
         Wait(1000);
         shutdown();
       }
     }
   }

  return i;
}

int get_nb_params_from_command(char command) {
  int result = 0;
  switch(command) {
    case 'M':
    {
      result = 2;
      break;
    }
    case 'm':
    {
      result = 2;
      break;
    }
    case 'L':
    {
      result = 2;
      break;
    }
    case 'l':
    {
      result = 2;
      break;
    }
    case 'H':
    {
      result = 1;
      break;
    }
    case 'h':
    {
      result = 1;
      break;
    }
    case 'V':
    {
      result = 1;
      break;
    }
    case 'v':
    {
      result = 1;
      break;
    }
    case 'z':
    {
      result = 0;
      break;
    }
    case 'C':
    {
      result = 6;
      break;
    }
    case 'c':
    {
      result = 6;
      break;
    }
    case 'S':
    {
      result = 4;
      break;
    }
    case 's':
    {
      result = 4;
      break;
    }
    case 'Q':
    {
      result = 4;
      break;
    }
    case 'q':
    {
      result = 4;
      break;
    }
    case 'T':
    {
      result = 2;
      break;
    }
    case 't':
    {
      result = 2;
      break;
    }
    default:
    {
      display_centered_text("Unknown command.");
      Wait(1000);
    }
  }
  return result;
}

void execute_command(char command, float& params[]) {

  bool debug = true;
  if (debug == true) {
    string msg = char_to_string(command);
    msg += " ";
    int k = 0;
    while(k < ArrayLen(params)) {
      msg += NumToStr(params[k]);
      msg += " ";
      k += 1;
    }
    display_centered_text(msg);
    Wait(2000);
  }


  switch(command) {
    case 'M':
    {
      Point p = transform_x_y(params[0], params[1]);
      pen_up();
      goto_point(p.x, p.y);
      break;
    }
    case 'm':
    {
      Point p = transform_no_shift_x_y(params[0], params[1]);
      pen_up();
      goto_point_relative(p.x, p.y);
      break;
    }
    case 'L':
    {
      Point p = transform_x_y(params[0], params[1]);
      print_line(p.x, p.y);
      break;
    }
    case 'l':
    {
      Point p = transform_no_shift_x_y(params[0], params[1]);
      print_line_relative(p.x, p.y);
      break;
    }
    case 'H':
    {
      Point p = transform_x_y(params[0], 0);
      horizontal_line_to(p.x);
      break;
    }
    case 'h':
    {
      Point p = transform_no_shift_x_y(params[0], 0);
      horizontal_line_to_relative(p.x);
      break;
    }
    case 'V':
    {
      Point p = transform_x_y(0, params[0]);
      vertical_line_to(p.y);
      break;
    }
    case 'v':
    {
      Point p = transform_no_shift_x_y(0, params[0]);
      vertical_line_to_relative(p.y);
      break;
    }
    case 'z':
    {
      close_path();
      break;
    }
    case 'C':
    {
      Point p1 = transform_x_y(params[0], params[1]);
      Point p2 = transform_x_y(params[2], params[3]);
      Point p3 = transform_x_y(params[4], params[5]);
      curve_to(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
      break;
    }
    case 'c':
    {
      Point p1 = transform_no_shift_x_y(params[0], params[1]);
      Point p2 = transform_no_shift_x_y(params[2], params[3]);
      Point p3 = transform_no_shift_x_y(params[4], params[5]);
      curve_to_relative(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
      break;
    }
    case 'S':
    {
      Point p2 = transform_x_y(params[0], params[1]);
      Point p3 = transform_x_y(params[2], params[3]);
      smooth_curve_to(p2.x, p2.y, p3.x, p3.y);
      break;
    }
    case 's':
    {
      Point p2 = transform_no_shift_x_y(params[0], params[1]);
      Point p3 = transform_no_shift_x_y(params[2], params[3]);
      smooth_curve_to_relative(p2.x, p2.y, p3.x, p3.y);
      break;
    }
    case 'Q':
    {
      Point p1 = transform_x_y(params[0], params[1]);
      Point p2 = transform_x_y(params[2], params[3]);
      quadratic_curve_to(p1.x, p1.y, p2.x, p2.y);
      break;
    }
    case 'q':
    {
      Point p1 = transform_no_shift_x_y(params[0], params[1]);
      Point p2 = transform_no_shift_x_y(params[2], params[3]);
      quadratic_curve_to_relative(p1.x, p1.y, p2.x, p2.y);
      break;
    }
    case 'T':
    {
      Point p2 = transform_x_y(params[0], params[1]);
      smooth_quadratic_curve_to(p2.x, p2.y);
      break;
    }
    case 't':
    {
      Point p2 = transform_no_shift_x_y(params[0], params[1]);
      smooth_quadratic_curve_to_relative(p2.x, p2.y);
      break;
    }
    default:
    {
      display_centered_text("Unknown command.");
      Wait(1000);
    }
  }
}

void parse_path(byte& handle) {

  display_centered_text("parse_path");
  Wait(1000);
  char command = NULL;
  char last_read_char = NULL;
  while(true) {
    char s;
    unsigned int return_code;
    if (last_read_char == NULL) {
      unsigned int return_code = Read(handle, s);
    } else {
      s = last_read_char;
      last_read_char = NULL;
      return_code = LDR_SUCCESS;
    }

    switch (return_code)
    {
      case LDR_SUCCESS:
      {
        if (s == SIMPLE_QUOTE || s == DOUBLE_QUOTE) {
          return;
        }

        if (isalpha(s)) {
           command = s;
           //get parameters
           int nb_params = get_nb_params_from_command(command);
           float params[];
           ArrayInit(params, 0, nb_params);
           get_params(handle, params, last_read_char);
           execute_command(command, params);
        }
        if (s == '-' || isdigit(s)) {
           int nb_params = get_nb_params_from_command(command);
           float params[];
           ArrayInit(params, 0, nb_params);
           get_params(handle, params, s);
           execute_command(command, params);
        }
        break;
      }
      case LDR_ENDOFFILE:
        // No more data to read.
        return;
      default:
        display_centered_text("Read failed.");
        Wait(1000);
        shutdown();
    }
  }

  pen_up();
}

void reset_scaling_parameters() {
  X_SHIFT = 0;
  Y_SHIFT = 0;
  SCALE_FACTOR = 1;
}

void reset_min_max_x_y() {
  MIN_X = UNSET;
  MAX_X = UNSET;
  MIN_Y = UNSET;
  MAX_Y = UNSET;
}

string get_next_word(byte& handle, char& last_read_char, bool debug) {
  string result="";

  while(true) {
    unsigned int return_code;
    if (last_read_char == NULL) {
      if (debug) {
        display_centered_text("Reading file");
        Wait(1000);
      }
      unsigned int return_code = Read(handle, last_read_char);
    } else {
      return_code = LDR_SUCCESS;
    }

    switch (return_code)
    {
      case LDR_SUCCESS:
      {

        if (debug) {
          display_centered_text("Read success");
          Wait(1000);
        }
        if (isalpha(last_read_char)) {
          if (debug) {
            display_centered_text("isalpha");
            Wait(1000);
          }

           result += char_to_string(last_read_char);
           Wait(100);
        }
        else
        {
           if (StrLen(result) == 0) {
             if (debug) {
               display_centered_text("StrLen(result) == 0");
               Wait(1000);
             }

             result += char_to_string(last_read_char);
             last_read_char = NULL;
           }
           return result;
        }
        break;
      }
      case LDR_ENDOFFILE:
        // No more data to read.
        display_centered_text("End of file reached.");
        Wait(1000);
        last_read_char = NULL;
        return result;
      default:
        display_centered_text("Read failed.");
        Wait(1000);
        shutdown();
    }
    last_read_char = NULL;
  }
}

void parse_path_instruction(byte& handle, char& last_read_char) {
 int state = INITIAL_STATE;
 int i = 0;
 while(true) {
   i += 1;
   string current_path;
   unsigned int return_code;
   if (last_read_char == NULL) {
      return_code = Read(handle, last_read_char);
    } else {
      return_code = LDR_SUCCESS;
    }

   switch (return_code)
   {
     case LDR_SUCCESS:
        switch (state)
        {
          case INITIAL_STATE:
            if (last_read_char == ' ') {
              state = FIRST_SPACE_FOUND;
            }
            break;
          case FIRST_SPACE_FOUND:
            if (last_read_char == 'd') {
              state = D_FOUND;
            } else {
              if (last_read_char != ' ') {
                display_centered_text("Invalid syntax 1");
                Wait(1000);
                return;
              }
            }
            break;
          case D_FOUND:
            if (last_read_char == '=') {
              state = EQUAL_FOUND;
            } else {
              if (last_read_char == ' ') {
                state = SECOND_SPACE_FOUND;
              } else {
                display_centered_text("Invalid syntax 2");
                Wait(1000);
                return;
              }
            }
            break;
          case SECOND_SPACE_FOUND:
            if (last_read_char == '=') {
              state = EQUAL_FOUND;
            } else {
                if (last_read_char != ' ') {
                  display_centered_text("Invalid syntax 3");
                  Wait(1000);
                  return;
                }
            }
            break;
          case EQUAL_FOUND:
            if (last_read_char == SIMPLE_QUOTE || last_read_char == DOUBLE_QUOTE) {
              parse_path(handle);
              return;
            } else {
              if (last_read_char == ' ') {
                state = THIRD_SPACE_FOUND;
              } else {
                 display_centered_text("Invalid syntax 4");
                 Wait(1000);
                 return;
              }
            }
            break;
          case THIRD_SPACE_FOUND:
            if (last_read_char == SIMPLE_QUOTE || last_read_char == DOUBLE_QUOTE) {
              parse_path(handle);
              return;
            } else {
                if (last_read_char != ' ') {
                  display_centered_text("Invalid syntax 5");
                  Wait(1000);
                  return;
                }
            }
            break;
        }
        break;
     case LDR_ENDOFFILE:
        // No more data to read.
        return;
     default:
        // Unanticipated exception.
        display_centered_text("Read failed.");
        Wait(1000);
        shutdown();
   }
   last_read_char = NULL;
 }
}

void parse_svg(byte& handle) {
  char last_read_char = NULL;
  bool display_words = false;
  while(true) {
    string word = get_next_word(handle, last_read_char, display_words);
    if (display_words) {
      string msg = "'" + word + "'";
      display_centered_text(msg);
      Wait(1000);
      display_centered_text("======");
      Wait(100);
      display_centered_text(NumToStr(StrLen(word)));
      Wait(1000);
    }
    if (word == "path") {
      parse_path_instruction(handle, last_read_char);
      display_centered_text("path done");
      while(true) {
        word = get_next_word(handle, last_read_char, display_words);
        display_centered_text(word);
        Wait(1000);
        if (word == "path") {
          break;
        }
      }
      display_words = true;
    }
    if (StrLen(word) == 0) {
      display_centered_text("Breaking.");
      Wait(1000);
      break;
    }
  }
}

void set_scaling_parameters(byte& handle) {
  reset_min_max_x_y();
  reset_scaling_parameters();
  SIMULATION = true;

  parse_svg(handle);

  X_SHIFT = -MIN_X;
  Y_SHIFT = -MIN_Y;

  PrintSettings print_settings = get_print_settings();

  float scale_x = print_settings.width * print_settings.points_per_lego_unit /(MAX_X - MIN_X);
  float scale_y = print_settings.height * print_settings.points_per_lego_unit /(MAX_Y - MIN_Y);

  SCALE_FACTOR = min(scale_x, scale_y);

  reset_min_max_x_y();
  SIMULATION = false;
}

void draw_svg(string filename) {
  display_centered_text("Analyzing file.");
  int fsize;
  byte handle;
  OpenFileRead(filename, fsize, handle);
  set_scaling_parameters(handle);
  OpenFileRead(filename, fsize, handle);
  display_centered_text("Printing.");
  parse_svg(handle);
  pen_up();
  goto_start_position();
}



#endif
