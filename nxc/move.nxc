#ifndef MOVE_NXC
#define MOVE_NXC

#define UNSET -100000

//current position
short ALPHA; //angle of the left arm (0 corresponds to vertical arm)
short BETA; //angle of the right arm (0 corresponds to vertical arm)

float X; //x = 0 corresponds to the middle of the segment between the two gear axis
float Y; //y = 0 corresponds to the ordinate of the two gear axis

int PID = PID_2;

//Variables used to determine the print area
float MIN_X = UNSET;
float MAX_X = UNSET;

float MIN_Y = UNSET;
float MAX_Y = UNSET;

//simulation mode is used to compute the coordinates of points
//to be plotted without actually plotting them.
//It is used to compute the size of the pattern and
//scale it so that it fits the print area.
bool SIMULATION = true;


short command_a;
bool command_a_to_process = false;
task move_a() {
  Wait(1000);
  PrintSettings print_settings = get_print_settings();

  while(true) {
    if(command_a_to_process == true) {
      RotateMotorExPID(OUT_A, print_settings.speed, command_a, 0, false, true, PID, PID, PID);
      command_a_to_process = false;
    }
  }
}

short command_b;
bool command_b_to_process = false;
task move_b() {
  PrintSettings print_settings = get_print_settings();
  while(true) {
    if(command_b_to_process == true) {
      RotateMotorExPID(OUT_B, print_settings.speed, -command_b, 0, false, true, PID, PID, PID);
      command_b_to_process = false;
    }
  }
}

void wait_system_to_be_ready_for_move() {
  while(command_a_to_process || command_b_to_process ) {
    Wait(10);
  }
}

void move_motors(short rotation_a, short rotation_b) {
  wait_system_to_be_ready_for_move();

  //pass parameters to the tasks in charge of rotating the motors.
  command_a = rotation_a;
  command_b = rotation_b;
  command_a_to_process = true;
  command_b_to_process = true;

  return;
}

void update_min_max_x_y(float x, float y) {
    if (MIN_X == UNSET) {
      MIN_X = x;
    } else {
      MIN_X = min(MIN_X, x);
    }

    if (MAX_X == UNSET) {
      MAX_X = x;
    } else {
      MAX_X = max(MAX_X, x);
    }

    if (MIN_Y == UNSET) {
      MIN_Y = y;
    } else {
      MIN_Y = min(MIN_Y, y);
    }

    if (MAX_Y == UNSET) {
      MAX_Y = y;
    } else {
      MAX_Y = max(MAX_Y, y);
    }
}

void goto_position(float x, float y)
{
  Point p = convert_to_actual_coordinates(x, y);

  if (SIMULATION == true) {
    update_min_max_x_y(x, y);
    X = x;
    Y = y;
    return;
  }

  StructureSettings structure_settings = get_structure_settings();

  bool result_set = false;
  //get alpha beta
  AnglePair angle_pair = get_alpha_beta(p, structure_settings, result_set);
  if (!result_set)
  {
    return;
  }
  short target_alpha = round(structure_settings.gear_ratio * angle_pair.alpha);
  short target_beta = round(structure_settings.gear_ratio * angle_pair.beta);

  short rotation_a = compute_rotation(ALPHA, target_alpha);
  short rotation_b = compute_rotation(BETA, target_beta);

  move_motors(rotation_a, rotation_b);

  ALPHA = ALPHA + rotation_a;
  BETA = BETA + rotation_b;

  X = x;
  Y = y;

}

#endif




