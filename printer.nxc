#define SPEED 40
#define MULTIPLICATOR 3

#define WIDTH 13
#define HEIGHT 13
float pos_to_alpha[];
float pos_to_beta[];

short alpha;
short beta;

short target_alpha;
short target_beta;

short rotation_a;
short rotation_b;

short result;

sub init_arrays() {
ArrayInit(pos_to_alpha, 0, 169);
 pos_to_alpha[0] = 60;
 pos_to_alpha[1] = 58;
 pos_to_alpha[2] = 57;
 pos_to_alpha[3] = 55;
 pos_to_alpha[4] = 53;
 pos_to_alpha[5] = 51;
 pos_to_alpha[6] = 50;
 pos_to_alpha[7] = 47;
 pos_to_alpha[8] = 45;
 pos_to_alpha[9] = 43;
 pos_to_alpha[10] = 41;
 pos_to_alpha[11] = 38;
 pos_to_alpha[12] = 36;
 pos_to_alpha[13] = 64;
 pos_to_alpha[14] = 63;
 pos_to_alpha[15] = 61;
 pos_to_alpha[16] = 60;
 pos_to_alpha[17] = 58;
 pos_to_alpha[18] = 56;
 pos_to_alpha[19] = 54;
 pos_to_alpha[20] = 52;
 pos_to_alpha[21] = 50;
 pos_to_alpha[22] = 48;
 pos_to_alpha[23] = 45;
 pos_to_alpha[24] = 43;
 pos_to_alpha[25] = 41;
 pos_to_alpha[26] = 69;
 pos_to_alpha[27] = 67;
 pos_to_alpha[28] = 66;
 pos_to_alpha[29] = 64;
 pos_to_alpha[30] = 62;
 pos_to_alpha[31] = 60;
 pos_to_alpha[32] = 58;
 pos_to_alpha[33] = 56;
 pos_to_alpha[34] = 54;
 pos_to_alpha[35] = 52;
 pos_to_alpha[36] = 50;
 pos_to_alpha[37] = 47;
 pos_to_alpha[38] = 45;
 pos_to_alpha[39] = 74;
 pos_to_alpha[40] = 72;
 pos_to_alpha[41] = 70;
 pos_to_alpha[42] = 69;
 pos_to_alpha[43] = 67;
 pos_to_alpha[44] = 65;
 pos_to_alpha[45] = 63;
 pos_to_alpha[46] = 61;
 pos_to_alpha[47] = 58;
 pos_to_alpha[48] = 56;
 pos_to_alpha[49] = 54;
 pos_to_alpha[50] = 52;
 pos_to_alpha[51] = 49;
 pos_to_alpha[52] = 78;
 pos_to_alpha[53] = 76;
 pos_to_alpha[54] = 75;
 pos_to_alpha[55] = 73;
 pos_to_alpha[56] = 71;
 pos_to_alpha[57] = 69;
 pos_to_alpha[58] = 67;
 pos_to_alpha[59] = 65;
 pos_to_alpha[60] = 63;
 pos_to_alpha[61] = 60;
 pos_to_alpha[62] = 58;
 pos_to_alpha[63] = 56;
 pos_to_alpha[64] = 53;
 pos_to_alpha[65] = 83;
 pos_to_alpha[66] = 81;
 pos_to_alpha[67] = 79;
 pos_to_alpha[68] = 77;
 pos_to_alpha[69] = 75;
 pos_to_alpha[70] = 73;
 pos_to_alpha[71] = 71;
 pos_to_alpha[72] = 69;
 pos_to_alpha[73] = 67;
 pos_to_alpha[74] = 65;
 pos_to_alpha[75] = 62;
 pos_to_alpha[76] = 60;
 pos_to_alpha[77] = 57;
 pos_to_alpha[78] = 87;
 pos_to_alpha[79] = 86;
 pos_to_alpha[80] = 84;
 pos_to_alpha[81] = 82;
 pos_to_alpha[82] = 80;
 pos_to_alpha[83] = 78;
 pos_to_alpha[84] = 76;
 pos_to_alpha[85] = 73;
 pos_to_alpha[86] = 71;
 pos_to_alpha[87] = 69;
 pos_to_alpha[88] = 66;
 pos_to_alpha[89] = 64;
 pos_to_alpha[90] = 61;
 pos_to_alpha[91] = 92;
 pos_to_alpha[92] = 90;
 pos_to_alpha[93] = 88;
 pos_to_alpha[94] = 87;
 pos_to_alpha[95] = 84;
 pos_to_alpha[96] = 82;
 pos_to_alpha[97] = 80;
 pos_to_alpha[98] = 78;
 pos_to_alpha[99] = 75;
 pos_to_alpha[100] = 73;
 pos_to_alpha[101] = 70;
 pos_to_alpha[102] = 68;
 pos_to_alpha[103] = 65;
 pos_to_alpha[104] = 97;
 pos_to_alpha[105] = 95;
 pos_to_alpha[106] = 93;
 pos_to_alpha[107] = 91;
 pos_to_alpha[108] = 89;
 pos_to_alpha[109] = 87;
 pos_to_alpha[110] = 85;
 pos_to_alpha[111] = 82;
 pos_to_alpha[112] = 80;
 pos_to_alpha[113] = 77;
 pos_to_alpha[114] = 75;
 pos_to_alpha[115] = 72;
 pos_to_alpha[116] = 69;
 pos_to_alpha[117] = 102;
 pos_to_alpha[118] = 100;
 pos_to_alpha[119] = 98;
 pos_to_alpha[120] = 96;
 pos_to_alpha[121] = 94;
 pos_to_alpha[122] = 92;
 pos_to_alpha[123] = 89;
 pos_to_alpha[124] = 87;
 pos_to_alpha[125] = 84;
 pos_to_alpha[126] = 82;
 pos_to_alpha[127] = 79;
 pos_to_alpha[128] = 76;
 pos_to_alpha[129] = 73;
 pos_to_alpha[130] = 108;
 pos_to_alpha[131] = 106;
 pos_to_alpha[132] = 104;
 pos_to_alpha[133] = 101;
 pos_to_alpha[134] = 99;
 pos_to_alpha[135] = 97;
 pos_to_alpha[136] = 94;
 pos_to_alpha[137] = 92;
 pos_to_alpha[138] = 89;
 pos_to_alpha[139] = 86;
 pos_to_alpha[140] = 83;
 pos_to_alpha[141] = 80;
 pos_to_alpha[142] = 77;
 pos_to_alpha[143] = 113;
 pos_to_alpha[144] = 111;
 pos_to_alpha[145] = 109;
 pos_to_alpha[146] = 107;
 pos_to_alpha[147] = 104;
 pos_to_alpha[148] = 102;
 pos_to_alpha[149] = 99;
 pos_to_alpha[150] = 97;
 pos_to_alpha[151] = 94;
 pos_to_alpha[152] = 91;
 pos_to_alpha[153] = 88;
 pos_to_alpha[154] = 85;
 pos_to_alpha[155] = 82;
 pos_to_alpha[156] = 120;
 pos_to_alpha[157] = 118;
 pos_to_alpha[158] = 115;
 pos_to_alpha[159] = 113;
 pos_to_alpha[160] = 110;
 pos_to_alpha[161] = 108;
 pos_to_alpha[162] = 105;
 pos_to_alpha[163] = 102;
 pos_to_alpha[164] = 99;
 pos_to_alpha[165] = 96;
 pos_to_alpha[166] = 93;
 pos_to_alpha[167] = 89;
 pos_to_alpha[168] = 86;
 ArrayInit(pos_to_beta, 0, 169);
 pos_to_beta[0] = 27;
 pos_to_beta[1] = 15;
 pos_to_beta[2] = 8;
 pos_to_beta[3] = 2;
 pos_to_beta[4] = -3;
 pos_to_beta[5] = -7;
 pos_to_beta[6] = -11;
 pos_to_beta[7] = -15;
 pos_to_beta[8] = -19;
 pos_to_beta[9] = -23;
 pos_to_beta[10] = -26;
 pos_to_beta[11] = -29;
 pos_to_beta[12] = -32;
 pos_to_beta[13] = 13;
 pos_to_beta[14] = 6;
 pos_to_beta[15] = 1;
 pos_to_beta[16] = -4;
 pos_to_beta[17] = -8;
 pos_to_beta[18] = -13;
 pos_to_beta[19] = -16;
 pos_to_beta[20] = -20;
 pos_to_beta[21] = -24;
 pos_to_beta[22] = -27;
 pos_to_beta[23] = -30;
 pos_to_beta[24] = -33;
 pos_to_beta[25] = -37;
 pos_to_beta[26] = 5;
 pos_to_beta[27] = 0;
 pos_to_beta[28] = -5;
 pos_to_beta[29] = -9;
 pos_to_beta[30] = -13;
 pos_to_beta[31] = -17;
 pos_to_beta[32] = -21;
 pos_to_beta[33] = -24;
 pos_to_beta[34] = -28;
 pos_to_beta[35] = -31;
 pos_to_beta[36] = -34;
 pos_to_beta[37] = -38;
 pos_to_beta[38] = -41;
 pos_to_beta[39] = 0;
 pos_to_beta[40] = -5;
 pos_to_beta[41] = -10;
 pos_to_beta[42] = -14;
 pos_to_beta[43] = -18;
 pos_to_beta[44] = -21;
 pos_to_beta[45] = -25;
 pos_to_beta[46] = -29;
 pos_to_beta[47] = -32;
 pos_to_beta[48] = -35;
 pos_to_beta[49] = -38;
 pos_to_beta[50] = -42;
 pos_to_beta[51] = -45;
 pos_to_beta[52] = -5;
 pos_to_beta[53] = -10;
 pos_to_beta[54] = -14;
 pos_to_beta[55] = -18;
 pos_to_beta[56] = -22;
 pos_to_beta[57] = -25;
 pos_to_beta[58] = -29;
 pos_to_beta[59] = -32;
 pos_to_beta[60] = -36;
 pos_to_beta[61] = -39;
 pos_to_beta[62] = -42;
 pos_to_beta[63] = -45;
 pos_to_beta[64] = -48;
 pos_to_beta[65] = -10;
 pos_to_beta[66] = -14;
 pos_to_beta[67] = -18;
 pos_to_beta[68] = -22;
 pos_to_beta[69] = -25;
 pos_to_beta[70] = -29;
 pos_to_beta[71] = -33;
 pos_to_beta[72] = -36;
 pos_to_beta[73] = -39;
 pos_to_beta[74] = -43;
 pos_to_beta[75] = -46;
 pos_to_beta[76] = -49;
 pos_to_beta[77] = -52;
 pos_to_beta[78] = -13;
 pos_to_beta[79] = -18;
 pos_to_beta[80] = -21;
 pos_to_beta[81] = -25;
 pos_to_beta[82] = -29;
 pos_to_beta[83] = -33;
 pos_to_beta[84] = -36;
 pos_to_beta[85] = -40;
 pos_to_beta[86] = -43;
 pos_to_beta[87] = -46;
 pos_to_beta[88] = -50;
 pos_to_beta[89] = -53;
 pos_to_beta[90] = -56;
 pos_to_beta[91] = -17;
 pos_to_beta[92] = -21;
 pos_to_beta[93] = -25;
 pos_to_beta[94] = -29;
 pos_to_beta[95] = -32;
 pos_to_beta[96] = -36;
 pos_to_beta[97] = -40;
 pos_to_beta[98] = -43;
 pos_to_beta[99] = -46;
 pos_to_beta[100] = -50;
 pos_to_beta[101] = -53;
 pos_to_beta[102] = -56;
 pos_to_beta[103] = -60;
 pos_to_beta[104] = -20;
 pos_to_beta[105] = -24;
 pos_to_beta[106] = -28;
 pos_to_beta[107] = -32;
 pos_to_beta[108] = -36;
 pos_to_beta[109] = -39;
 pos_to_beta[110] = -43;
 pos_to_beta[111] = -46;
 pos_to_beta[112] = -50;
 pos_to_beta[113] = -53;
 pos_to_beta[114] = -57;
 pos_to_beta[115] = -60;
 pos_to_beta[116] = -63;
 pos_to_beta[117] = -24;
 pos_to_beta[118] = -28;
 pos_to_beta[119] = -31;
 pos_to_beta[120] = -35;
 pos_to_beta[121] = -39;
 pos_to_beta[122] = -43;
 pos_to_beta[123] = -46;
 pos_to_beta[124] = -50;
 pos_to_beta[125] = -53;
 pos_to_beta[126] = -57;
 pos_to_beta[127] = -60;
 pos_to_beta[128] = -64;
 pos_to_beta[129] = -67;
 pos_to_beta[130] = -27;
 pos_to_beta[131] = -31;
 pos_to_beta[132] = -34;
 pos_to_beta[133] = -38;
 pos_to_beta[134] = -42;
 pos_to_beta[135] = -46;
 pos_to_beta[136] = -49;
 pos_to_beta[137] = -53;
 pos_to_beta[138] = -57;
 pos_to_beta[139] = -60;
 pos_to_beta[140] = -64;
 pos_to_beta[141] = -67;
 pos_to_beta[142] = -71;
 pos_to_beta[143] = -30;
 pos_to_beta[144] = -34;
 pos_to_beta[145] = -37;
 pos_to_beta[146] = -41;
 pos_to_beta[147] = -45;
 pos_to_beta[148] = -49;
 pos_to_beta[149] = -53;
 pos_to_beta[150] = -56;
 pos_to_beta[151] = -60;
 pos_to_beta[152] = -64;
 pos_to_beta[153] = -67;
 pos_to_beta[154] = -71;
 pos_to_beta[155] = -75;
 pos_to_beta[156] = -32;
 pos_to_beta[157] = -36;
 pos_to_beta[158] = -40;
 pos_to_beta[159] = -44;
 pos_to_beta[160] = -48;
 pos_to_beta[161] = -52;
 pos_to_beta[162] = -56;
 pos_to_beta[163] = -60;
 pos_to_beta[164] = -63;
 pos_to_beta[165] = -67;
 pos_to_beta[166] = -71;
 pos_to_beta[167] = -75;
 pos_to_beta[168] = -79;
}

inline bool is_stalled(byte output)
{
 long t0 = CurrentTick();
 long previousCount = MotorTachoCount(output);
 while(CurrentTick() < t0 + 100) {
  Wait(10);
  long count = MotorTachoCount(output);
  short stallThreshold = 2;
  if (abs(count - previousCount) >= stallThreshold)
  {
   return false;
  }
  previousCount = count;
 }
 return true;
}

inline void calibrate_motor(byte output) {
 OnRev(output, SPEED);
 until (is_stalled(output));
 Off(output);
 long initialCount = MotorRotationCount(output);
 Wait(100);
 OnFwd(output, SPEED);
 until (is_stalled(output));
 Off(output);
 long finalCount = MotorRotationCount(output);
 Wait(100);
 RotateMotorEx(output, -SPEED, (finalCount - initialCount) / 2, 0, false, true);
 Wait(100);
}

inline void calibrate_stalled() {
  calibrate_motor(OUT_A);
  calibrate_motor(OUT_B);
}

inline short get_alpha(short x, short y) {
 return pos_to_alpha[y * WIDTH + x];
}

inline short get_beta(short x, short y) {
 return pos_to_beta[y * WIDTH + x];
}

inline short normalize_angle(short angle) {
 while (angle > 180) {
    angle = angle - 360;
 }
 while (angle < -180) {
    angle = angle + 360;
 }
 return angle;
}

inline short compute_rotation(short position, short target) {
 target = normalize_angle(target);
 position = normalize_angle(position);

 short rotation = (target - position);

 return MULTIPLICATOR * rotation;
}

sub goto_position(short x, short y) {
 target_alpha = get_alpha(x, y);
 target_beta = get_beta(x, y);


 rotation_a = compute_rotation(alpha, target_alpha);
 rotation_b = compute_rotation(beta, target_beta);

 ClearScreen();
 NumOut(8, LCD_LINE4, alpha);
 NumOut(32, LCD_LINE4, beta);

 NumOut(8, LCD_LINE5, target_alpha);
 NumOut(32, LCD_LINE5, target_beta);

 NumOut(8, LCD_LINE6, rotation_a);
 NumOut(32, LCD_LINE6, rotation_b);

 RotateMotorEx(OUT_A, SPEED, rotation_a, 0, false, true);
 alpha = target_alpha;

 RotateMotorEx(OUT_B, SPEED, -rotation_b, 0, false, true);
 beta = target_beta;
}

sub print_point(short x, short y) {
  goto_position(x, y);
  RotateMotor(OUT_C, SPEED, 360);
}

sub plot_heart() {
 print_point(3, 0);
 print_point(2, 0);
 print_point(1, 1);
 print_point(0, 2);
 print_point(0, 3);
 print_point(0, 4);
 print_point(1, 5);
 print_point(2, 6);
 print_point(3, 7);
 print_point(4, 8);
 print_point(5, 9);
 print_point(6, 8);
 print_point(7, 7);
 print_point(8, 6);
 print_point(9, 5);
 print_point(10, 4);
 print_point(10, 3);
 print_point(10, 2);
 print_point(9, 1);
 print_point(8, 0);
 print_point(7, 0);
 print_point(6, 1);
 print_point(5, 2);
 print_point(4, 1);
}

sub plot_vertical_line() {
 short y = 0;
 repeat(HEIGHT) {
   print_point(5, y);
   y += 1;
 }
}

sub plot_grid() {
 short x = 0;
 repeat(WIDTH) {
  short y = 0;
  repeat(HEIGHT - 1) {
   print_point(x, y);
   y += 1;
  }
  x += 1;
 }

}

task main()
{
 //SetSensorColorFull(IN_3);
 //SetSensorTouch(IN_1);
 //SetSensorTouch(IN_2);
 init_arrays();
 calibrate_stalled();
 //plot_heart();

 plot_grid();
 //RotateMotorEx(OUT_A, SPEED, 60 * 3, 0, false, true);
 //RotateMotorEx(OUT_B, SPEED, 60 * 3, 0, false, true);
}