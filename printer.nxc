#define SPEED 40

#define WIDTH 27
#define HEIGHT 13
short pos_to_alpha[] = {180,174,171,165,159,153,150,141,135,129,123,114,108,99,93,84,75,66,57,45,36,24,12,-3,-18,-36,-66,192,189,183,180,174,168,162,156,150,144,135,129,123,114,105,99,90,81,72,60,51,42,30,18,3,-12,-27,207,201,198,192,186,180,174,168,162,156,150,141,135,126,120,111,102,93,84,75,66,54,45,33,21,9,-6,222,216,210,207,201,195,189,183,174,168,162,156,147,138,132,123,114,105,96,87,78,69,57,48,36,24,12,234,228,225,219,213,207,201,195,189,180,174,168,159,153,144,135,126,117,108,99,90,81,72,60,51,39,27,249,243,237,231,225,219,213,207,201,195,186,180,171,165,156,147,138,129,120,111,102,93,84,72,63,51,39,261,258,252,246,240,234,228,219,213,207,198,192,183,174,168,159,150,141,132,123,114,105,93,84,75,63,51,276,270,264,261,252,246,240,234,225,219,210,204,195,186,180,171,162,153,144,135,126,114,105,96,84,75,63,291,285,279,273,267,261,255,246,240,231,225,216,207,198,192,183,174,165,156,144,135,126,117,105,96,84,75,306,300,294,288,282,276,267,261,252,246,237,228,219,210,201,192,183,174,165,156,147,135,126,117,105,96,84,324,318,312,303,297,291,282,276,267,258,249,240,231,222,213,204,195,186,177,165,156,147,135,126,114,105,93,339,333,327,321,312,306,297,291,282,273,264,255,246,237,225,216,207,198,186,177,168,156,147,135,126,114,102,360,354,345,339,330,324,315,306,297,288,279,267,258,249,240,228,219,207,198,189,177,168,156,144,135,123,111};
short pos_to_beta[] = {81,45,24,6,-9,-21,-33,-45,-57,-69,-78,-87,-96,-105,-114,-123,-132,-138,-147,-153,-162,-168,-174,-180,-186,-192,-195,39,18,3,-12,-24,-39,-48,-60,-72,-81,-90,-99,-111,-120,-126,-135,-144,-153,-159,-168,-174,-180,-186,-195,-201,-207,-210,15,0,-15,-27,-39,-51,-63,-72,-84,-93,-102,-114,-123,-132,-141,-147,-156,-165,-171,-180,-186,-195,-201,-207,-213,-219,-225,0,-15,-30,-42,-54,-63,-75,-87,-96,-105,-114,-126,-135,-144,-153,-159,-168,-177,-183,-192,-201,-207,-213,-222,-228,-234,-240,-15,-30,-42,-54,-66,-75,-87,-96,-108,-117,-126,-135,-144,-153,-162,-171,-180,-189,-198,-204,-213,-219,-228,-234,-240,-249,-255,-30,-42,-54,-66,-75,-87,-99,-108,-117,-129,-138,-147,-156,-165,-174,-183,-192,-201,-210,-219,-225,-234,-240,-249,-255,-261,-270,-39,-54,-63,-75,-87,-99,-108,-120,-129,-138,-150,-159,-168,-177,-186,-195,-204,-213,-222,-231,-240,-246,-255,-261,-270,-276,-285,-51,-63,-75,-87,-96,-108,-120,-129,-138,-150,-159,-168,-180,-189,-198,-207,-216,-225,-234,-243,-252,-261,-270,-276,-285,-291,-300,-60,-72,-84,-96,-108,-117,-129,-138,-150,-159,-171,-180,-189,-201,-210,-219,-228,-240,-249,-258,-267,-276,-285,-291,-300,-309,-315,-72,-84,-93,-105,-117,-129,-138,-150,-159,-171,-180,-192,-201,-213,-222,-231,-243,-252,-261,-270,-282,-291,-300,-309,-318,-327,-333,-81,-93,-102,-114,-126,-138,-147,-159,-171,-180,-192,-201,-213,-225,-234,-246,-255,-267,-276,-285,-297,-306,-318,-327,-336,-345,-354,-90,-102,-111,-123,-135,-147,-159,-168,-180,-192,-201,-213,-225,-237,-246,-258,-270,-279,-291,-303,-315,-324,-336,-345,-357,-366,-378,-96,-108,-120,-132,-144,-156,-168,-180,-189,-201,-213,-225,-237,-249,-261,-273,-285,-297,-309,-321,-333,-345,-357,-369,-381,-393,-405};
short alpha;
short beta;

short target_alpha;
short target_beta;

short rotation_a;
short rotation_b;

short result;

inline bool is_stalled(byte output)
{
 long t0 = CurrentTick();
 long previousCount = MotorTachoCount(output);
 while(CurrentTick() < t0 + 100) {
  Wait(10);
  long count = MotorTachoCount(output);
  short stallThreshold = 2;
  if (abs(count - previousCount) >= stallThreshold)
  {
   return false;
  }
  previousCount = count;
 }
 return true;
}

inline void calibrate_motor(byte output) {
 OnRev(output, SPEED);
 until (is_stalled(output));
 Off(output);
 long initialCount = MotorRotationCount(output);
 Wait(100);
 OnFwd(output, SPEED);
 until (is_stalled(output));
 Off(output);
 long finalCount = MotorRotationCount(output);
 Wait(100);
 RotateMotorEx(output, -SPEED, (finalCount - initialCount) / 2, 0, false, true);
 Wait(100);
}

inline void calibrate_stalled() {
  calibrate_motor(OUT_A);
  calibrate_motor(OUT_B);
}

inline short get_alpha(short x, short y) {
 return pos_to_alpha[y * WIDTH + x];
}

inline short get_beta(short x, short y) {
 return pos_to_beta[y * WIDTH + x];
}

inline short normalize_angle(short angle) {
 while (angle > 180) {
    angle = angle - 360;
 }
 while (angle < -180) {
    angle = angle + 360;
 }
 return angle;
}

inline short compute_rotation(short position, short target) {
 short rotation = (target - position);
 return rotation;
}

sub goto_position(short x, short y) {
 target_alpha = get_alpha(x, y);
 target_beta = get_beta(x, y);


 rotation_a = compute_rotation(alpha, target_alpha);
 rotation_b = compute_rotation(beta, target_beta);

 ClearScreen();
 NumOut(8, LCD_LINE4, alpha);
 NumOut(32, LCD_LINE4, beta);

 NumOut(8, LCD_LINE5, target_alpha);
 NumOut(32, LCD_LINE5, target_beta);

 NumOut(8, LCD_LINE6, rotation_a);
 NumOut(32, LCD_LINE6, rotation_b);

 RotateMotorEx(OUT_A, SPEED, rotation_a, 0, false, true);
 alpha = target_alpha;

 RotateMotorEx(OUT_B, SPEED, -rotation_b, 0, false, true);
 beta = target_beta;
}

sub print_point(short x, short y) {
  goto_position(x, y);
  RotateMotor(OUT_C, SPEED, 360);
}

sub plot_heart() {
 print_point(3, 0);
 print_point(2, 0);
 print_point(1, 1);
 print_point(0, 2);
 print_point(0, 3);
 print_point(0, 4);
 print_point(1, 5);
 print_point(2, 6);
 print_point(3, 7);
 print_point(4, 8);
 print_point(5, 9);
 print_point(6, 8);
 print_point(7, 7);
 print_point(8, 6);
 print_point(9, 5);
 print_point(10, 4);
 print_point(10, 3);
 print_point(10, 2);
 print_point(9, 1);
 print_point(8, 0);
 print_point(7, 0);
 print_point(6, 1);
 print_point(5, 2);
 print_point(4, 1);
}

sub plot_invader() {
 print_point(0, 4);
 print_point(0, 5);
 print_point(0, 6);

 print_point(1, 3);
 print_point(1, 4);

 print_point(2, 0);
 print_point(2, 3);
 print_point(2, 4);
 print_point(2, 5);
 print_point(2, 6);
 print_point(2, 7);

 print_point(3, 1);
 print_point(3, 2);
 print_point(3, 4);
 print_point(3, 5);
 print_point(3, 7);

 print_point(4, 3);
 print_point(4, 4);
 print_point(4, 5);
 print_point(4, 6);

 print_point(5, 3);
 print_point(5, 4);
 print_point(5, 5);
 print_point(5, 6);

 print_point(6, 1);
 print_point(6, 2);
 print_point(6, 4);
 print_point(6, 5);
 print_point(6, 7);

 print_point(7, 0);
 print_point(7, 3);
 print_point(7, 4);
 print_point(7, 5);
 print_point(7, 6);
 print_point(7, 7);

 print_point(8, 4);
 print_point(8, 5);
 print_point(8, 6);

 print_point(9, 3);
 print_point(9, 4);
}

sub plot_vertical_line() {
 short y = 0;
 repeat(HEIGHT) {
   print_point(5, y);
   y += 1;
 }
}

sub plot_grid() {
 short x = 0;
 repeat(WIDTH) {
  short y = 0;
  repeat(HEIGHT - 1) {
   print_point(x, y);
   y += 1;
  }
  x += 1;
 }

}

task main()
{
 //SetSensorColorFull(IN_3);
 //SetSensorTouch(IN_1);
 //SetSensorTouch(IN_2);
 calibrate_stalled();
 plot_heart();
 //plot_invader();
 //plot_grid();
}