#define SPEED 25
#define MULTIPLICATOR 3

#define WIDTH 11
#define HEIGHT 8
float pos_to_alpha[];
float pos_to_beta[];

int alpha;
int beta;

int target_alpha;
int target_beta;

int rotation_a;
int rotation_b;

int result;

sub init_arrays() {
 ArrayInit(pos_to_alpha, 0, 88);
 pos_to_alpha[0] = 55;
 pos_to_alpha[1] = 49;
 pos_to_alpha[2] = 42;
 pos_to_alpha[3] = 36;
 pos_to_alpha[4] = 29;
 pos_to_alpha[5] = 21;
 pos_to_alpha[6] = 13;
 pos_to_alpha[7] = 5;
 pos_to_alpha[8] = -5;
 pos_to_alpha[9] = -17;
 pos_to_alpha[10] = -36;
 pos_to_alpha[11] = 62;
 pos_to_alpha[12] = 56;
 pos_to_alpha[13] = 49;
 pos_to_alpha[14] = 42;
 pos_to_alpha[15] = 35;
 pos_to_alpha[16] = 27;
 pos_to_alpha[17] = 19;
 pos_to_alpha[18] = 11;
 pos_to_alpha[19] = 2;
 pos_to_alpha[20] = -8;
 pos_to_alpha[21] = -20;
 pos_to_alpha[22] = 70;
 pos_to_alpha[23] = 63;
 pos_to_alpha[24] = 56;
 pos_to_alpha[25] = 48;
 pos_to_alpha[26] = 41;
 pos_to_alpha[27] = 33;
 pos_to_alpha[28] = 25;
 pos_to_alpha[29] = 17;
 pos_to_alpha[30] = 8;
 pos_to_alpha[31] = -1;
 pos_to_alpha[32] = -12;
 pos_to_alpha[33] = 78;
 pos_to_alpha[34] = 70;
 pos_to_alpha[35] = 62;
 pos_to_alpha[36] = 54;
 pos_to_alpha[37] = 46;
 pos_to_alpha[38] = 38;
 pos_to_alpha[39] = 30;
 pos_to_alpha[40] = 21;
 pos_to_alpha[41] = 13;
 pos_to_alpha[42] = 4;
 pos_to_alpha[43] = -6;
 pos_to_alpha[44] = 86;
 pos_to_alpha[45] = 78;
 pos_to_alpha[46] = 69;
 pos_to_alpha[47] = 60;
 pos_to_alpha[48] = 52;
 pos_to_alpha[49] = 43;
 pos_to_alpha[50] = 34;
 pos_to_alpha[51] = 25;
 pos_to_alpha[52] = 17;
 pos_to_alpha[53] = 8;
 pos_to_alpha[54] = -2;
 pos_to_alpha[55] = 96;
 pos_to_alpha[56] = 86;
 pos_to_alpha[57] = 76;
 pos_to_alpha[58] = 66;
 pos_to_alpha[59] = 57;
 pos_to_alpha[60] = 47;
 pos_to_alpha[61] = 38;
 pos_to_alpha[62] = 29;
 pos_to_alpha[63] = 20;
 pos_to_alpha[64] = 11;
 pos_to_alpha[65] = 2;
 pos_to_alpha[66] = 109;
 pos_to_alpha[67] = 96;
 pos_to_alpha[68] = 84;
 pos_to_alpha[69] = 73;
 pos_to_alpha[70] = 62;
 pos_to_alpha[71] = 52;
 pos_to_alpha[72] = 42;
 pos_to_alpha[73] = 32;
 pos_to_alpha[74] = 23;
 pos_to_alpha[75] = 14;
 pos_to_alpha[76] = 5;
 pos_to_alpha[77] = 128;
 pos_to_alpha[78] = 109;
 pos_to_alpha[79] = 93;
 pos_to_alpha[80] = 80;
 pos_to_alpha[81] = 67;
 pos_to_alpha[82] = 56;
 pos_to_alpha[83] = 45;
 pos_to_alpha[84] = 35;
 pos_to_alpha[85] = 26;
 pos_to_alpha[86] = 16;
 pos_to_alpha[87] = 7;
 ArrayInit(pos_to_beta, 0, 88);
 pos_to_beta[0] = 36;
 pos_to_beta[1] = 17;
 pos_to_beta[2] = 5;
 pos_to_beta[3] = -5;
 pos_to_beta[4] = -13;
 pos_to_beta[5] = -21;
 pos_to_beta[6] = -29;
 pos_to_beta[7] = -36;
 pos_to_beta[8] = -42;
 pos_to_beta[9] = -49;
 pos_to_beta[10] = -55;
 pos_to_beta[11] = 20;
 pos_to_beta[12] = 8;
 pos_to_beta[13] = -2;
 pos_to_beta[14] = -11;
 pos_to_beta[15] = -19;
 pos_to_beta[16] = -27;
 pos_to_beta[17] = -35;
 pos_to_beta[18] = -42;
 pos_to_beta[19] = -49;
 pos_to_beta[20] = -56;
 pos_to_beta[21] = -62;
 pos_to_beta[22] = 12;
 pos_to_beta[23] = 1;
 pos_to_beta[24] = -8;
 pos_to_beta[25] = -17;
 pos_to_beta[26] = -25;
 pos_to_beta[27] = -33;
 pos_to_beta[28] = -41;
 pos_to_beta[29] = -48;
 pos_to_beta[30] = -56;
 pos_to_beta[31] = -63;
 pos_to_beta[32] = -70;
 pos_to_beta[33] = 6;
 pos_to_beta[34] = -4;
 pos_to_beta[35] = -13;
 pos_to_beta[36] = -21;
 pos_to_beta[37] = -30;
 pos_to_beta[38] = -38;
 pos_to_beta[39] = -46;
 pos_to_beta[40] = -54;
 pos_to_beta[41] = -62;
 pos_to_beta[42] = -70;
 pos_to_beta[43] = -78;
 pos_to_beta[44] = 2;
 pos_to_beta[45] = -8;
 pos_to_beta[46] = -17;
 pos_to_beta[47] = -25;
 pos_to_beta[48] = -34;
 pos_to_beta[49] = -43;
 pos_to_beta[50] = -52;
 pos_to_beta[51] = -60;
 pos_to_beta[52] = -69;
 pos_to_beta[53] = -78;
 pos_to_beta[54] = -86;
 pos_to_beta[55] = -2;
 pos_to_beta[56] = -11;
 pos_to_beta[57] = -20;
 pos_to_beta[58] = -29;
 pos_to_beta[59] = -38;
 pos_to_beta[60] = -47;
 pos_to_beta[61] = -57;
 pos_to_beta[62] = -66;
 pos_to_beta[63] = -76;
 pos_to_beta[64] = -86;
 pos_to_beta[65] = -96;
 pos_to_beta[66] = -5;
 pos_to_beta[67] = -14;
 pos_to_beta[68] = -23;
 pos_to_beta[69] = -32;
 pos_to_beta[70] = -42;
 pos_to_beta[71] = -52;
 pos_to_beta[72] = -62;
 pos_to_beta[73] = -73;
 pos_to_beta[74] = -84;
 pos_to_beta[75] = -96;
 pos_to_beta[76] = -109;
 pos_to_beta[77] = -7;
 pos_to_beta[78] = -16;
 pos_to_beta[79] = -26;
 pos_to_beta[80] = -35;
 pos_to_beta[81] = -45;
 pos_to_beta[82] = -56;
 pos_to_beta[83] = -67;
 pos_to_beta[84] = -80;
 pos_to_beta[85] = -93;
 pos_to_beta[86] = -109;
 pos_to_beta[87] = -128;
}

inline bool is_stalled(byte output)
{
 long t0 = CurrentTick();
 long previousCount = MotorTachoCount(output);
 while(CurrentTick() < t0 + 100) {
  Wait(10);
  long count = MotorTachoCount(output);
  int stallThreshold = 2;
  if (abs(count - previousCount) >= stallThreshold)
  {
   return false;
  }
  previousCount = count;
 }
 return true;
}

inline void calibrate_motor(byte output) {
 OnRev(output, SPEED);
 until (is_stalled(output));
 Off(output);
 long initialCount = MotorRotationCount(output);
 Wait(100);
 OnFwd(output, SPEED);
 until (is_stalled(output));
 Off(output);
 long finalCount = MotorRotationCount(output);
 Wait(100);
 RotateMotorEx(output, -SPEED, (finalCount - initialCount) / 2, 0, false, true);
 Wait(100);
}

inline void calibrate_stalled() {
  calibrate_motor(OUT_A);
  calibrate_motor(OUT_B);
}

inline int get_alpha(int x, int y) {
 return pos_to_alpha[y * WIDTH + x];
}

inline int get_beta(int x, int y) {
 return pos_to_beta[y * WIDTH + x];
}

inline int normalize_angle(int angle) {
 while (angle > 180) {
    angle = angle - 360;
 }
 while (angle < -180) {
    angle = angle + 360;
 }
 return angle;
}

inline int compute_rotation(int position, int target) {
 target = normalize_angle(target);
 position = normalize_angle(position);

 int rotation = (target - position);

 return MULTIPLICATOR * rotation;
}

sub goto_position(int x, int y) {
 target_alpha = get_alpha(x, y);
 target_beta = get_beta(x, y);


 rotation_a = compute_rotation(alpha, target_alpha);
 rotation_b = compute_rotation(beta, target_beta);

 RotateMotorEx(OUT_A, SPEED, rotation_a, 0, false, true);
 alpha = target_alpha;

 RotateMotorEx(OUT_B, SPEED, -rotation_b, 0, false, true);
 beta = target_beta;
}

sub print_point(int x, int y) {
  goto_position(x, y);
  RotateMotor(OUT_C, SPEED, 360);
}

sub print_heart() {
 print_point(3, 0);
 print_point(2, 0);
 print_point(1, 1);
 print_point(0, 2);
 print_point(0, 3);
 print_point(0, 4);
 print_point(1, 5);
 print_point(2, 6);
 print_point(3, 7);
 print_point(4, 8);
 print_point(5, 9);
 print_point(6, 8);
 print_point(7, 7);
 print_point(8, 6);
 print_point(9, 5);
 print_point(10, 4);
 print_point(10, 3);
 print_point(10, 2);
 print_point(9, 1);
 print_point(8, 0);
 print_point(7, 0);
 print_point(6, 1);
 print_point(5, 2);
 print_point(4, 1);
}

sub plot_vertical_line() {
 int y = 0;
 repeat(HEIGHT) {
   print_point(0, y);
   y += 1;
 }
}

sub plot_grid() {
 int x = 0;
 repeat(WIDTH) {
  int y = 0;
  repeat(HEIGHT) {
   print_point(x, y);
   y += 1;
  }
  x += 1;
 }

}

task main()
{
 //SetSensorColorFull(IN_3);
 //SetSensorTouch(IN_1);
 //SetSensorTouch(IN_2);
 init_arrays();
 calibrate_stalled();

 plot_grid();

}