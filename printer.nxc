#define SPEED 40
#define MULTIPLICATOR 3

#define WIDTH 13
#define HEIGHT 8
float pos_to_alpha[];
float pos_to_beta[];

int alpha;
int beta;

int target_alpha;
int target_beta;

int rotation_a;
int rotation_b;

int result;

sub init_arrays() {
ArrayInit(pos_to_alpha, 0, 104);
 pos_to_alpha[0] = 60;
 pos_to_alpha[1] = 57;
 pos_to_alpha[2] = 53;
 pos_to_alpha[3] = 50;
 pos_to_alpha[4] = 45;
 pos_to_alpha[5] = 41;
 pos_to_alpha[6] = 36;
 pos_to_alpha[7] = 31;
 pos_to_alpha[8] = 25;
 pos_to_alpha[9] = 19;
 pos_to_alpha[10] = 12;
 pos_to_alpha[11] = 4;
 pos_to_alpha[12] = -6;
 pos_to_alpha[13] = 69;
 pos_to_alpha[14] = 66;
 pos_to_alpha[15] = 62;
 pos_to_alpha[16] = 58;
 pos_to_alpha[17] = 54;
 pos_to_alpha[18] = 50;
 pos_to_alpha[19] = 45;
 pos_to_alpha[20] = 40;
 pos_to_alpha[21] = 34;
 pos_to_alpha[22] = 28;
 pos_to_alpha[23] = 22;
 pos_to_alpha[24] = 15;
 pos_to_alpha[25] = 7;
 pos_to_alpha[26] = 78;
 pos_to_alpha[27] = 75;
 pos_to_alpha[28] = 71;
 pos_to_alpha[29] = 67;
 pos_to_alpha[30] = 63;
 pos_to_alpha[31] = 58;
 pos_to_alpha[32] = 53;
 pos_to_alpha[33] = 48;
 pos_to_alpha[34] = 42;
 pos_to_alpha[35] = 36;
 pos_to_alpha[36] = 30;
 pos_to_alpha[37] = 24;
 pos_to_alpha[38] = 17;
 pos_to_alpha[39] = 87;
 pos_to_alpha[40] = 84;
 pos_to_alpha[41] = 80;
 pos_to_alpha[42] = 76;
 pos_to_alpha[43] = 71;
 pos_to_alpha[44] = 66;
 pos_to_alpha[45] = 61;
 pos_to_alpha[46] = 56;
 pos_to_alpha[47] = 50;
 pos_to_alpha[48] = 44;
 pos_to_alpha[49] = 38;
 pos_to_alpha[50] = 31;
 pos_to_alpha[51] = 25;
 pos_to_alpha[52] = 97;
 pos_to_alpha[53] = 93;
 pos_to_alpha[54] = 89;
 pos_to_alpha[55] = 85;
 pos_to_alpha[56] = 80;
 pos_to_alpha[57] = 75;
 pos_to_alpha[58] = 69;
 pos_to_alpha[59] = 64;
 pos_to_alpha[60] = 58;
 pos_to_alpha[61] = 52;
 pos_to_alpha[62] = 45;
 pos_to_alpha[63] = 39;
 pos_to_alpha[64] = 32;
 pos_to_alpha[65] = 108;
 pos_to_alpha[66] = 104;
 pos_to_alpha[67] = 99;
 pos_to_alpha[68] = 94;
 pos_to_alpha[69] = 89;
 pos_to_alpha[70] = 83;
 pos_to_alpha[71] = 77;
 pos_to_alpha[72] = 71;
 pos_to_alpha[73] = 65;
 pos_to_alpha[74] = 59;
 pos_to_alpha[75] = 52;
 pos_to_alpha[76] = 45;
 pos_to_alpha[77] = 38;
 pos_to_alpha[78] = 120;
 pos_to_alpha[79] = 115;
 pos_to_alpha[80] = 110;
 pos_to_alpha[81] = 105;
 pos_to_alpha[82] = 99;
 pos_to_alpha[83] = 93;
 pos_to_alpha[84] = 86;
 pos_to_alpha[85] = 80;
 pos_to_alpha[86] = 73;
 pos_to_alpha[87] = 66;
 pos_to_alpha[88] = 59;
 pos_to_alpha[89] = 52;
 pos_to_alpha[90] = 45;
 pos_to_alpha[91] = 135;
 pos_to_alpha[92] = 130;
 pos_to_alpha[93] = 124;
 pos_to_alpha[94] = 117;
 pos_to_alpha[95] = 110;
 pos_to_alpha[96] = 103;
 pos_to_alpha[97] = 96;
 pos_to_alpha[98] = 89;
 pos_to_alpha[99] = 81;
 pos_to_alpha[100] = 74;
 pos_to_alpha[101] = 66;
 pos_to_alpha[102] = 59;
 pos_to_alpha[103] = 51;
 ArrayInit(pos_to_beta, 0, 104);
 pos_to_beta[0] = 27;
 pos_to_beta[1] = 8;
 pos_to_beta[2] = -3;
 pos_to_beta[3] = -11;
 pos_to_beta[4] = -19;
 pos_to_beta[5] = -26;
 pos_to_beta[6] = -32;
 pos_to_beta[7] = -38;
 pos_to_beta[8] = -44;
 pos_to_beta[9] = -49;
 pos_to_beta[10] = -54;
 pos_to_beta[11] = -58;
 pos_to_beta[12] = -62;
 pos_to_beta[13] = 5;
 pos_to_beta[14] = -5;
 pos_to_beta[15] = -13;
 pos_to_beta[16] = -21;
 pos_to_beta[17] = -28;
 pos_to_beta[18] = -34;
 pos_to_beta[19] = -41;
 pos_to_beta[20] = -47;
 pos_to_beta[21] = -52;
 pos_to_beta[22] = -57;
 pos_to_beta[23] = -62;
 pos_to_beta[24] = -67;
 pos_to_beta[25] = -71;
 pos_to_beta[26] = -5;
 pos_to_beta[27] = -14;
 pos_to_beta[28] = -22;
 pos_to_beta[29] = -29;
 pos_to_beta[30] = -36;
 pos_to_beta[31] = -42;
 pos_to_beta[32] = -48;
 pos_to_beta[33] = -54;
 pos_to_beta[34] = -60;
 pos_to_beta[35] = -66;
 pos_to_beta[36] = -71;
 pos_to_beta[37] = -76;
 pos_to_beta[38] = -80;
 pos_to_beta[39] = -13;
 pos_to_beta[40] = -21;
 pos_to_beta[41] = -29;
 pos_to_beta[42] = -36;
 pos_to_beta[43] = -43;
 pos_to_beta[44] = -50;
 pos_to_beta[45] = -56;
 pos_to_beta[46] = -62;
 pos_to_beta[47] = -68;
 pos_to_beta[48] = -74;
 pos_to_beta[49] = -80;
 pos_to_beta[50] = -85;
 pos_to_beta[51] = -90;
 pos_to_beta[52] = -20;
 pos_to_beta[53] = -28;
 pos_to_beta[54] = -36;
 pos_to_beta[55] = -43;
 pos_to_beta[56] = -50;
 pos_to_beta[57] = -57;
 pos_to_beta[58] = -63;
 pos_to_beta[59] = -70;
 pos_to_beta[60] = -76;
 pos_to_beta[61] = -83;
 pos_to_beta[62] = -89;
 pos_to_beta[63] = -95;
 pos_to_beta[64] = -100;
 pos_to_beta[65] = -27;
 pos_to_beta[66] = -34;
 pos_to_beta[67] = -42;
 pos_to_beta[68] = -49;
 pos_to_beta[69] = -57;
 pos_to_beta[70] = -64;
 pos_to_beta[71] = -71;
 pos_to_beta[72] = -78;
 pos_to_beta[73] = -85;
 pos_to_beta[74] = -92;
 pos_to_beta[75] = -99;
 pos_to_beta[76] = -106;
 pos_to_beta[77] = -112;
 pos_to_beta[78] = -32;
 pos_to_beta[79] = -40;
 pos_to_beta[80] = -48;
 pos_to_beta[81] = -56;
 pos_to_beta[82] = -63;
 pos_to_beta[83] = -71;
 pos_to_beta[84] = -79;
 pos_to_beta[85] = -87;
 pos_to_beta[86] = -95;
 pos_to_beta[87] = -103;
 pos_to_beta[88] = -111;
 pos_to_beta[89] = -119;
 pos_to_beta[90] = -127;
 pos_to_beta[91] = -38;
 pos_to_beta[92] = -46;
 pos_to_beta[93] = -54;
 pos_to_beta[94] = -62;
 pos_to_beta[95] = -70;
 pos_to_beta[96] = -79;
 pos_to_beta[97] = -88;
 pos_to_beta[98] = -97;
 pos_to_beta[99] = -106;
 pos_to_beta[100] = -116;
 pos_to_beta[101] = -127;
 pos_to_beta[102] = -139;
 pos_to_beta[103] = -159;
}

inline bool is_stalled(byte output)
{
 long t0 = CurrentTick();
 long previousCount = MotorTachoCount(output);
 while(CurrentTick() < t0 + 100) {
  Wait(10);
  long count = MotorTachoCount(output);
  int stallThreshold = 2;
  if (abs(count - previousCount) >= stallThreshold)
  {
   return false;
  }
  previousCount = count;
 }
 return true;
}

inline void calibrate_motor(byte output) {
 OnRev(output, SPEED);
 until (is_stalled(output));
 Off(output);
 long initialCount = MotorRotationCount(output);
 Wait(100);
 OnFwd(output, SPEED);
 until (is_stalled(output));
 Off(output);
 long finalCount = MotorRotationCount(output);
 Wait(100);
 RotateMotorEx(output, -SPEED, (finalCount - initialCount) / 2, 0, false, true);
 Wait(100);
}

inline void calibrate_stalled() {
  calibrate_motor(OUT_A);
  calibrate_motor(OUT_B);
}

inline int get_alpha(int x, int y) {
 return pos_to_alpha[y * WIDTH + x];
}

inline int get_beta(int x, int y) {
 return pos_to_beta[y * WIDTH + x];
}

inline int normalize_angle(int angle) {
 while (angle > 180) {
    angle = angle - 360;
 }
 while (angle < -180) {
    angle = angle + 360;
 }
 return angle;
}

inline int compute_rotation(int position, int target) {
 target = normalize_angle(target);
 position = normalize_angle(position);

 int rotation = (target - position);

 return MULTIPLICATOR * rotation;
}

sub goto_position(int x, int y) {
 target_alpha = get_alpha(x, y);
 target_beta = get_beta(x, y);


 rotation_a = compute_rotation(alpha, target_alpha);
 rotation_b = compute_rotation(beta, target_beta);

 ClearScreen();
 NumOut(8, LCD_LINE4, alpha);
 NumOut(32, LCD_LINE4, beta);

 NumOut(8, LCD_LINE5, target_alpha);
 NumOut(32, LCD_LINE5, target_beta);

 NumOut(8, LCD_LINE6, rotation_a);
 NumOut(32, LCD_LINE6, rotation_b);

 RotateMotorEx(OUT_A, SPEED, rotation_a, 0, false, true);
 alpha = target_alpha;

 RotateMotorEx(OUT_B, SPEED, -rotation_b, 0, false, true);
 beta = target_beta;
}

sub print_point(int x, int y) {
  goto_position(x, y);
  RotateMotor(OUT_C, SPEED, 360);
}

sub plot_heart() {
 print_point(3, 0);
 print_point(2, 0);
 print_point(1, 1);
 print_point(0, 2);
 print_point(0, 3);
 print_point(0, 4);
 print_point(1, 5);
 print_point(2, 6);
 print_point(3, 7);
 print_point(4, 8);
 print_point(5, 9);
 print_point(6, 8);
 print_point(7, 7);
 print_point(8, 6);
 print_point(9, 5);
 print_point(10, 4);
 print_point(10, 3);
 print_point(10, 2);
 print_point(9, 1);
 print_point(8, 0);
 print_point(7, 0);
 print_point(6, 1);
 print_point(5, 2);
 print_point(4, 1);
}

sub plot_vertical_line() {
 int y = 0;
 repeat(HEIGHT) {
   print_point(5, y);
   y += 1;
 }
}

sub plot_grid() {
 int x = 0;
 repeat(WIDTH) {
  int y = 0;
  repeat(HEIGHT - 1) {
   print_point(x, y);
   y += 1;
  }
  x += 1;
 }

}

task main()
{
 //SetSensorColorFull(IN_3);
 //SetSensorTouch(IN_1);
 //SetSensorTouch(IN_2);
 init_arrays();
 calibrate_stalled();
 //plot_heart();

 plot_grid();
 //RotateMotorEx(OUT_A, SPEED, 60 * 3, 0, false, true);
 //RotateMotorEx(OUT_B, SPEED, 60 * 3, 0, false, true);
}