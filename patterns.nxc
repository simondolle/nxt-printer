#ifndef PATTERNS_NXC
#define PATTERNS_NXC

#include "draw.nxc"
#include "pen.nxc"
#include "calibration.nxc"

sub plot_corners() {
  PrintSettings print_settings = get_print_settings();

  print_point(0, 0);
  print_point(0, print_settings.height - 1);
  print_point(print_settings.width - 1, print_settings.height - 1);
  print_point(print_settings.width - 1, 0);
}

sub plot_heart() {
  int xs[] = {3, 2, 1, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 9, 8, 7, 6, 5, 4};
  int ys[] = {0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 1, 2, 1};
  plot_points(xs, ys);
}

void plot_heart_lines() {
  int xs[] = {2, 2, 1, 1, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5,  5,  6,  6,  7,  7,  8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 12, 12, 11, 11, 8, 8, 7, 7, 6, 6, 5, 5};
  int ys[] = {0, 1, 1, 2, 2, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 10, 10, 9, 9, 8,  8,  7,  7,  6,  6,  5,  5,  2,  2,  1,  1,  0, 0, 1, 1, 2, 2, 1, 1, 0};
  plot_pattern(xs, ys);
}

void plot_heart_curve() {
  goto_position(6.33634505505, 0.0);
  pen_down();
  curve_to(4.85460119849, 0.0, 4.35499605147, 1.31512170762, 4.35499605147, 1.31512170762);
  smooth_curve_to(3.85600060389, 0.0, 2.37364704789, 0.0);
  curve_to(0.892338690946, 0.0, 0.0, 1.41223811957, 0.0, 2.57624146421);
  curve_to_relative(0.0, 1.95068983137, 4.35499605147, 4.92375853579, 4.35499605147, 4.92375853579);
  smooth_curve_to_relative(4.35499605147, -2.97237190505, 4.35499605147, -4.92341013611);
  curve_to(8.70999210294, 1.41223811957, 7.8180889116, 0.0, 6.33634505505, 0.0);
  pen_up();
}

void plot_invader_lines() {
  int body_xs[] = {3, 2, 2, 3, 3, 3, 2, 2, 1, 1, 0, 0, 1, 1, 2, 2, 3, 3, 5, 5, 3, 3, 8, 8, 6, 6, 8, 8, 9, 9, 9, 10, 10, 11, 11, 10, 10, 9, 9, 8, 8, 9, 9, 7, 7, 4, 4};
  int body_ys[] = {1, 1, 0, 0, 1, 2, 2, 3, 3, 4, 4, 7, 7, 5, 5, 7, 7, 8, 8, 7, 7, 6, 6, 7, 7, 8, 8, 7, 7, 7, 5,  5,  7,  7,  4,  4,  3, 3, 2, 2, 0, 0, 1, 1, 2, 2, 1};

  plot_pattern(body_xs, body_ys);

  int left_eye_xs[] = {4, 4, 3, 3};
  int left_eye_ys[] = {4, 3, 3, 4};

  plot_pattern(left_eye_xs, left_eye_ys);

  int rigth_eye_xs[] = {8, 8, 7, 7};
  int right_eye_ys[] = {4, 3, 3, 4};

  plot_pattern(rigth_eye_xs, right_eye_ys);
}

sub plot_invader() {
  int xs[] = {0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9};
  int ys[] = {4, 5, 6, 3, 4, 0, 3, 4, 5, 6, 7, 1, 2, 4, 5, 7, 3, 4, 5, 6, 3, 4, 5, 6, 1, 2, 4, 5, 7, 0, 3, 4, 5, 6, 7, 4, 5, 6, 3, 4};
  plot_points(xs, ys);
}

void plot_ghost_lines() {
  int body_xs[] = {5, 5, 3, 3, 2, 2, 1, 1, 0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  7,  7,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 12, 12, 11, 11, 10, 10, 8, 8};
  int body_ys[] = {0, 1, 1, 2, 2, 3, 3, 6, 6, 14, 14, 13, 13, 12, 12, 13, 13, 14, 14, 12, 12, 14, 14, 13, 13, 12, 12, 13, 13, 14, 14,  6,  6,  3,  3,  2,  2,  1, 1, 0};
  plot_pattern(body_xs, body_ys);

  int left_eye_xs[] = {4, 4, 3, 3, 4, 4, 6, 6, 7, 7, 6, 6};
  int left_eye_ys[] = {3, 4, 4, 7, 7, 8, 8, 7, 7, 4, 4, 3};
  plot_pattern(left_eye_xs, left_eye_ys);

  int left_eye_pupil_xs[] = {5, 5, 7, 7};
  int left_eye_pupil_ys[] = {4, 6, 6, 4};
  plot_pattern(left_eye_pupil_xs, left_eye_pupil_ys);

  int rigth_eye_xs[] = {9, 9, 8, 8, 9, 9, 11, 11, 12, 12, 11, 11};
  int right_eye_ys[] = {3, 4, 4, 7, 7, 8,  8,  7,  7,  4,  4,  3};
  plot_pattern(rigth_eye_xs, right_eye_ys);

  int right_eye_pupil_xs[] = {10, 10, 12, 12};
  int right_eye_pupil_ys[] = {4, 6, 6, 4};
  plot_pattern(right_eye_pupil_xs, right_eye_pupil_ys);
}

void plot_star_lines() {
  int body_xs[] = {6, 6, 5, 5, 4, 4, 0, 0, 1, 1, 2, 2, 3,  3,  2,  2,  1,  1,  3,  3,  4,  4,  6,  6,  8,  8, 10, 10, 11, 11, 13, 13, 12, 12, 11, 11, 12, 12, 13, 13, 14, 14, 10, 10, 9, 9, 8, 8};
  int body_ys[] = {0, 2, 2, 4, 4, 5, 5, 7, 7, 8, 8, 9, 9, 11, 11, 14, 14, 16, 16, 15, 15, 14, 14, 13, 13, 14, 14, 15, 15, 16, 16, 14, 14, 11, 11,  9,  9,  8,  8,  7,  7,  5,  5,  4, 4, 2, 2, 0};

  plot_pattern(body_xs, body_ys);

  int left_eye_xs[] = {5, 5, 6, 6};
  int left_eye_ys[] = {6, 8, 8, 6};

  plot_pattern(left_eye_xs, left_eye_ys);

  int rigth_eye_xs[] = {8, 8, 9, 9};
  int right_eye_ys[] = {6, 8, 8, 6};

  plot_pattern(rigth_eye_xs, right_eye_ys);
}

void plot_note_lines() {
  int xs[] = {3, 3, 1, 1, 0, 0, 1, 1, 3, 3, 4, 4, 5, 5, 6, 6, 5, 5};
  int ys[] = {0, 4, 4, 5, 5, 7, 7, 8, 8, 7, 7, 2, 2, 3, 3, 1, 1, 0};

  plot_pattern(xs, ys);

}

void plot_grid_lines() {

  PrintSettings print_settings = get_print_settings();
  int width = print_settings.width * print_settings.points_per_lego_unit;
  int height = print_settings.height * print_settings.points_per_lego_unit;
  int x = 0;
  while(x <= width) {
    goto_position(x, 0);
    pen_down();
    print_line(x, height);

    pen_up();
    x= x + 1;
  }

  goto_position(0, 0);
  int y = 0;
  while(y <= height)
  {
    goto_position(0, y);
    pen_down();
    print_line(width, y);

    pen_up();
    y= y + 1;
  }
  pen_up();
}

sub plot_grid() {
 PrintSettings print_settings = get_print_settings();

 short x = 0;
 while (x < print_settings.width * print_settings.points_per_lego_unit)
 {
  short y = 0;
  while( y < print_settings.height * print_settings.points_per_lego_unit) {
   print_point(x, y);
   y += 1;
  }
  x += 1;
 }

}

sub plot_rectangle() {
  PrintSettings print_settings = get_print_settings();

  int xs[];
  ArrayInit(xs, 0, 4);
  int ys[];
  ArrayInit(ys, 0, 4);

  xs[2] = print_settings.width - 1;
  xs[3] = print_settings.width - 1;

  ys[1] = print_settings.height - 1;
  ys[2] = print_settings.height - 1;
  plot_pattern(xs, ys);
}

void plot_mona_lisa() {
pen_up();
goto_point(4.84847168685, 1.63852543569);
pen_down();
curve_to_relative(0.415169118845, 0.100168304468, 1.0590151474, 0.400347467289, 1.29160106412, 1.02041370324);
curve_to_relative(0.135186492209, 0.359791519626, 0.126065475867, 1.15022531082, 0.0954449210055, 1.75042076117);
curve_to_relative(-0.109777946685, 0.636190889842, -0.363863401922, 1.10005972094, -0.759324610457, 1.3815082252);
curve_to_relative(-0.529344698409, 0.376730549976, -1.19257288669, 0.337966230523, -1.51278571041, 0.288940767686);
curve_to_relative(-0.436994407948, -0.213692382866, -0.694825994897, -0.863401921928, -0.806721320376, -1.39372387209);
curve_to_relative(-0.130951734622, -0.619740485368, -0.0514685922146, -0.942885064336, -0.0514685922146, -0.942885064336);
verticalLineTo(3.51110266573);
curve_to_relative(-0.116292958358, -0.30995168033, -0.0128671480536, -1.22693957327, 0.142027254465, -1.53705412889);
curve_to_relative(0.154894402519, -0.30995168033, 0.647266409686, -0.315000814376, 0.787827786525, -0.426244638688);
curve_to_relative(0.196753352516, -0.155383028395, 0.461425701721, -0.827406482437, 0.538954340627, -1.03165209838);
curve_to_relative(-1.61344264075, 0.202779738314, -2.01623323742, 1.56197404854, -2.09490200337, 1.92290569521);
curve_to_relative(-0.192355719637, 0.183397578587, -0.350344752701, 0.512731418644, -0.189423964385, 0.869102557142);
curve_to_relative(-0.0576578533037, 0.0741082577773, -0.115641457191, 0.17557956458, -0.138769748629, 0.303110918074);
curve_to_relative(-0.0192192844346, 0.106520440849, -0.0185677832673, 0.262717845703, 0.0721537542755, 0.444486671372);
curve_to_relative(-0.160269287149, 0.310440306206, -0.502307399967, 1.1785656116, -0.127694228785, 2.41202019654);
curve_to_relative(0.361257397253, 1.19029263261, 0.207665997068, 1.50871382811, 0.108474944351, 1.65383571312);
curve_to_relative(-0.243172810685, 0.0957706715891, -1.0451707476, 0.45865682176, -1.3815082252, 1.19778489603);
curve_to_relative(-0.0962592974646, 0.0426733264564, -0.202616863022, 0.111406699604, -0.30278516749, 0.208806124111);
verticalLineTo(11.4626744123);
horizontalLineToRelative(8.2693414409);
verticalLineTo(8.12698843585);
curve_to_relative(-0.240892556599, -0.353765133829, -0.521852434986, -0.73635919431, -0.766002497421, -0.988327270753);
curve_to_relative(-0.0671046202291, -0.385851566317, -0.39953309083, -2.32178728487, -0.410771485966, -2.99820837179);
curve_to_relative(-0.00635213638091, -0.381291058146, -0.0210109126446, -1.27433628319, -0.346761496281, -2.08333785765);
curve_to_relative(-0.379173679353, -0.942559313752, -1.07416254954, -1.47630164504, -2.01835061621, -1.55627341332);
horizontalLineToRelative(-0.511428416309);
curve_to(4.13344915576, 1.48998316955, 4.7139366958, 1.60611325262, 4.84847168685, 1.63852543569);
closePath();
pen_up();
goto_point(6.35962864433, 7.77990118899);
pen_down();
curve_to_relative(0.0, 0.104077311472, 0.0403930723709, 0.197893479559, 0.10570606439, 0.268092730333);
curve_to_relative(-0.0566806015527, 0.0500027145882, -0.0930017916282, 0.12183071828, -0.0930017916282, 0.203268364189);
curve_to_relative(0.0, 0.0369726912427, 0.00765513871546, 0.0716651284, 0.0210109126446, 0.104403062055);
curve_to_relative(-0.0845322764537, 0.07883164124, -0.137140995711, 0.190889842011, -0.137140995711, 0.315652315544);
curve_to_relative(0.0, 0.0757370106955, 0.0195450350182, 0.146587762636, 0.0535859710082, 0.208643248819);
curve_to_relative(-0.0876269069982, 0.0713393778164, -0.144470383843, 0.179814322167, -0.144470383843, 0.301645040447);
curve_to_relative(0.0, 0.0623812367664, 0.0153102774309, 0.121179217113, 0.0416960747055, 0.173299310495);
curve_to_relative(-0.376730549976, 0.173950811662, -0.803626689831, 0.704598512406, -0.803626689831, 0.704598512406);
curve_to_relative(-0.852163526793, 0.06449861556, -2.80275802161, -0.245615940062, -2.88028666051, -0.891416472121);
curve_to_relative(-0.0776915141973, -0.645800532059, 1.76947717031, -2.02763450785, 1.76947717031, -2.02763450785);
curve_to_relative(0.0, -0.0794831424073, -0.0443020793746, -0.440251913785, -0.0781801400728, -0.704272761822);
curve_to_relative(0.0482110863782, 0.00260600466909, 0.0987024268418, 0.00407188229546, 0.151148270807, 0.00407188229546);
curve_to_relative(0.38340843694, 0.0, 0.869916933601, -0.0775286389055, 1.29779032521, -0.380802432271);
curve_to_relative(0.204897117107, -0.145284760302, 0.376893425267, -0.329496715348, 0.516966176231, -0.550518486346);
curve_to_relative(0.0285031760682, 0.83131548944, 0.217927140453, 1.83821054346, 0.217927140453, 1.83821054346);
print_line_relative(0.124925348825, 0.113524078397);
curve_to(6.42412725989, 7.53249362072, 6.35962864433, 7.64846082849, 6.35962864433, 7.77990118899);
pen_up();
goto_point(9.30750855095, 12.0);
pen_down();
horizontalLineTo(0.0);
verticalLineTo(0.0);
horizontalLineTo(9.30750855095);
verticalLineTo(12.0);
print_line(9.30750855095, 12.0);
pen_up();
}
#endif
