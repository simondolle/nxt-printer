#ifndef SVG_PARSER_NXC
#define SVG_PARSER_NXC

#define INITIAL_STATE 0
#define FIRST_SPACE_FOUND 1
#define D_FOUND 2
#define SECOND_SPACE_FOUND 3
#define EQUAL_FOUND 4
#define THIRD_SPACE_FOUND 5
#define QUOTE_FOUND 6

#define SIMPLE_QUOTE 39
#define DOUBLE_QUOTE 34

#include "draw.nxc"

float X_SHIFT = 0;
float Y_SHIFT = 0;

float SCALE_FACTOR = 1;

Point transform_x_y(float x, float y) {
  Point p;
  p.x = SCALE_FACTOR * (x + X_SHIFT);
  p.y = SCALE_FACTOR * (y + Y_SHIFT);
  return p;
}

Point transform_no_shift_x_y(float x, float y) {
  Point p;
  p.x = SCALE_FACTOR * x;
  p.y = SCALE_FACTOR * y;
  return p;
}

string get_token(string& path, int start_position) {
  int token_start = start_position;
  int token_end = start_position;
  while(isspace(StrIndex(path, token_start))) {
    token_start+=1;
  }
  token_end = token_start;
  int len = StrLen(path);
  while(token_end + 1 < len && !isalpha(StrIndex(path, token_end + 1))) {
    token_end += 1;
  }
  return SubStr(path, token_start, token_end - token_start + 1);
}

char get_command(string token) {
  return StrIndex(token, 0);
}

int get_params(string token, float& result[]) {

  int result_index = 0;

  int i = 1;
  int j = 1;
  int len = StrLen(token);
  while(i < len) {
      while((j + 1 < len) && (strcmp(SubStr(token, j + 1, 1), "-") != 0) && (strcmp(SubStr(token, j + 1, 1), ",") != 0)) {
        j += 1;
      }
      string number = SubStr(token, i, j - i + 1);
      float f = StrToNum(number);
      //detect conversion errors
      if (f == 0) {
        int k = 0;
        bool all_spaces = true;
        while(k < j - i + 1) {
          if (strcmp(SubStr(token, i + k, 1), " ") != 0) {
            all_spaces = false;
          }
          k += 1;
        }
        if (all_spaces) {
          return 0;
        }
      }
      if(result_index < ArrayLen(result)) {
        result[result_index] = f;
      }
      result_index += 1;
      if(strcmp(SubStr(token, j + 1, 1), ",") == 0) {
        i = j+2;
      }
      else {
        i = j+1;
      }
      j = i;
  }

  return result_index;
}

int get_nb_params(string token) {
  float a[] = {0};
  return get_params(token, a);
}

void parse_path(string path) {
  int i = 0;
  int len = StrLen(path);
  while(i < len) {
    string token = get_token(path, i);
    i += StrLen(token);
    int nb_params = get_nb_params(token);
    float params[];
    ArrayInit(params, 0, nb_params);
    char command = get_command(token);

    get_params(token, params);

    int param_index = 0;
    while(param_index < nb_params) {
        switch(command) {
            case 'M':
            {
              Point p = transform_x_y(params[param_index], params[param_index + 1]);
              pen_up();
              goto_point(p.x, p.y);
              param_index += 2;
              break;
            }
            case 'm':
            {
              Point p = transform_no_shift_x_y(params[param_index], params[param_index + 1]);
              pen_up();
              goto_point_relative(p.x, p.y);
              param_index += 2;
              break;
            }
            case 'L':
            {
              Point p = transform_x_y(params[param_index], params[param_index + 1]);
              print_line(p.x, p.y);
              param_index += 2;
              break;
            }
            case 'l':
            {
              Point p = transform_no_shift_x_y(params[param_index], params[param_index + 1]);
              print_line_relative(p.x, p.y);
              param_index += 2;
              break;
            }
            case 'H':
            {
              Point p = transform_x_y(params[param_index], 0);
              horizontal_line_to(p.x);
              param_index += 1;
              break;
            }
            case 'h':
            {
              Point p = transform_no_shift_x_y(params[param_index], 0);
              horizontal_line_to_relative(p.x);
              param_index += 1;
              break;
            }
            case 'V':
            {
              Point p = transform_x_y(0, params[param_index + 0]);
              vertical_line_to(p.y);
              param_index += 1;
              break;
            }
            case 'v':
            {
              Point p = transform_no_shift_x_y(0, params[param_index]);
              vertical_line_to_relative(p.y);
              param_index += 1;
              break;
            }
            case 'z':
            {
              close_path();
              break;
            }
            case 'C':
            {
              Point p1 = transform_x_y(params[param_index    ], params[param_index + 1]);
              Point p2 = transform_x_y(params[param_index + 2], params[param_index + 3]);
              Point p3 = transform_x_y(params[param_index + 4], params[param_index + 5]);
              curve_to(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
              param_index += 6;
              break;
            }
            case 'c':
            {
              Point p1 = transform_no_shift_x_y(params[param_index    ], params[param_index + 1]);
              Point p2 = transform_no_shift_x_y(params[param_index + 2], params[param_index + 3]);
              Point p3 = transform_no_shift_x_y(params[param_index + 4], params[param_index + 5]);
              curve_to_relative(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
              param_index += 6;
              break;
            }
            case 'S':
            {
              Point p2 = transform_x_y(params[param_index   ], params[param_index + 1]);
              Point p3 = transform_x_y(params[param_index + 2], params[param_index + 3]);
              smooth_curve_to(p2.x, p2.y, p3.x, p3.y);
              param_index += 4;
              break;
            }
            case 's':
            {
              Point p2 = transform_no_shift_x_y(params[param_index    ], params[param_index + 1]);
              Point p3 = transform_no_shift_x_y(params[param_index + 2], params[param_index + 3]);
              smooth_curve_to_relative(p2.x, p2.y, p3.x, p3.y);
              param_index += 4;
              break;
            }
            default:
            {
              ClearScreen();
              TextOut(8, LCD_LINE4, "Unknown command");
            }
        }
    }
  }
  pen_up();
}

void reset_min_max_x_y() {
  MIN_X = UNSET;
  MAX_X = UNSET;
  MIN_Y = UNSET;
  MAX_Y = UNSET;
}

void parse_svg_file(byte& handle) {
 int state = INITIAL_STATE;
 int i = 0;
 while(true) {
   i += 1;
   char s;
   string current_path;
   unsigned int return_code = Read(handle, s);
   switch (return_code)
   {
     case LDR_SUCCESS:
        switch (state)
        {
          case INITIAL_STATE:
            if (s == ' ') {
              state = FIRST_SPACE_FOUND;
            }
            break;
          case FIRST_SPACE_FOUND:
            if (s == 'd') {
              state = D_FOUND;
            } else {
                if (s != ' ') {
                  state = INITIAL_STATE;
                }
            }
            break;
          case D_FOUND:
            if (s == '=') {
              state = EQUAL_FOUND;
            } else {
              if (s == ' ') {
                state = SECOND_SPACE_FOUND;
              } else {
                state = INITIAL_STATE;
              }
            }
            break;
          case SECOND_SPACE_FOUND:
            if (s == '=') {
              state = EQUAL_FOUND;
            } else {
                if (s != ' ') {
                  state = INITIAL_STATE;
                }
            }
            break;
          case EQUAL_FOUND:
            if (s == SIMPLE_QUOTE || s == DOUBLE_QUOTE) {
              state = QUOTE_FOUND;
              current_path = "";
            } else {
              if (s == ' ') {
                state = THIRD_SPACE_FOUND;
              } else {
                state = INITIAL_STATE;
              }
            }
            break;
          case THIRD_SPACE_FOUND:
            if (s == SIMPLE_QUOTE || s == DOUBLE_QUOTE) {
              state = QUOTE_FOUND;
              current_path = "";
            } else {
                if (s != ' ') {
                  state = INITIAL_STATE;
                }
            }
            break;
           case QUOTE_FOUND:
             if (s == SIMPLE_QUOTE || s == DOUBLE_QUOTE) {
              parse_path(current_path);
              state = INITIAL_STATE;
              current_path = "";
             } else {
               string h = "a";
               h[0] = s;
               current_path += h;
             }
             break;
        }
        break;
     case LDR_ENDOFFILE:
        // No more data to read.
        return;
     default:
        // Unanticipated exception.
        TextOut(0, LCD_LINE1, "read failed     ");
        shutdown();
   }
 }
}

void set_scaling_parameters_file(byte& handle) {
  reset_min_max_x_y();
  SIMULATION = true;

  parse_svg_file(handle);

  X_SHIFT = -MIN_X;
  Y_SHIFT = -MIN_Y;

  PrintSettings print_settings = get_print_settings();

  float scale_x = print_settings.width * print_settings.points_per_lego_unit /(MAX_X - MIN_X);
  float scale_y = print_settings.height * print_settings.points_per_lego_unit /(MAX_Y - MIN_Y);

  SCALE_FACTOR = min(scale_x, scale_y);

  reset_min_max_x_y();
  SIMULATION = false;
}

void draw_svg_file(string filename) {
  int fsize;
  byte handle;
  OpenFileRead(filename, fsize, handle);
  set_scaling_parameters_file(handle);
  OpenFileRead(filename, fsize, handle);
  parse_svg_file(handle);
}



#endif
